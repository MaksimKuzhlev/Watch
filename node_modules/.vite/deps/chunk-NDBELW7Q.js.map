{
  "version": 3,
  "sources": ["../../@polymer/polymer/lib/legacy/templatizer-behavior.js", "../../@polymer/polymer/lib/legacy/mutable-data-behavior.js", "../../@polymer/polymer/lib/elements/dom-bind.js", "../../@polymer/polymer/lib/elements/array-selector.js", "../../@polymer/polymer/polymer-legacy.js"],
  "sourcesContent": ["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { TemplateInstanceBase, templatize, modelForElement } from '../utils/templatize.js'; // eslint-disable-line no-unused-vars\n\n/**\n * @typedef {{\n *   _templatizerTemplate: HTMLTemplateElement,\n *   _parentModel: boolean,\n *   _instanceProps: Object,\n *   _forwardHostPropV2: Function,\n *   _notifyInstancePropV2: Function,\n *   ctor: function(new:TemplateInstanceBase, Object=)\n * }}\n */\nlet TemplatizerUser; // eslint-disable-line\n\n/**\n * The `Templatizer` behavior adds methods to generate instances of\n * templates that are each managed by an anonymous `PropertyEffects`\n * instance where data-bindings in the stamped template content are bound to\n * accessors on itself.\n *\n * This behavior is provided in Polymer 2.x-3.x as a hybrid-element convenience\n * only.  For non-hybrid usage, the `Templatize` library\n * should be used instead.\n *\n * Example:\n *\n *     import {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\n *     // Get a template from somewhere, e.g. light DOM\n *     let template = this.querySelector('template');\n *     // Prepare the template\n *     this.templatize(template);\n *     // Instance the template with an initial data model\n *     let instance = this.stamp({myProp: 'initial'});\n *     // Insert the instance's DOM somewhere, e.g. light DOM\n *     dom(this).appendChild(instance.root);\n *     // Changing a property on the instance will propagate to bindings\n *     // in the template\n *     instance.myProp = 'new value';\n *\n * Users of `Templatizer` may need to implement the following abstract\n * API's to determine how properties and paths from the host should be\n * forwarded into to instances:\n *\n *     _forwardHostPropV2: function(prop, value)\n *\n * Likewise, users may implement these additional abstract API's to determine\n * how instance-specific properties that change on the instance should be\n * forwarded out to the host, if necessary.\n *\n *     _notifyInstancePropV2: function(inst, prop, value)\n *\n * In order to determine which properties are instance-specific and require\n * custom notification via `_notifyInstanceProp`, define an `_instanceProps`\n * object containing keys for each instance prop, for example:\n *\n *     _instanceProps: {\n *       item: true,\n *       index: true\n *     }\n *\n * Any properties used in the template that are not defined in _instanceProp\n * will be forwarded out to the Templatize `owner` automatically.\n *\n * Users may also implement the following abstract function to show or\n * hide any DOM generated using `stamp`:\n *\n *     _showHideChildren: function(shouldHide)\n *\n * Note that some callbacks are suffixed with `V2` in the Polymer 2.x behavior\n * as the implementations will need to differ from the callbacks required\n * by the 1.x Templatizer API due to changes in the `TemplateInstance` API\n * between versions 1.x and 2.x.\n *\n * @polymerBehavior\n */\nexport const Templatizer = {\n\n  /**\n   * Generates an anonymous `TemplateInstance` class (stored as `this.ctor`)\n   * for the provided template.  This method should be called once per\n   * template to prepare an element for stamping the template, followed\n   * by `stamp` to create new instances of the template.\n   *\n   * @param {!HTMLTemplateElement} template Template to prepare\n   * @param {boolean=} mutableData When `true`, the generated class will skip\n   *   strict dirty-checking for objects and arrays (always consider them to\n   *   be \"dirty\"). Defaults to false.\n   * @return {void}\n   * @this {TemplatizerUser}\n   */\n  templatize(template, mutableData) {\n    this._templatizerTemplate = template;\n    this.ctor =\n        templatize(template, /** @type {!Polymer_PropertyEffects} */ (this), {\n          mutableData: Boolean(mutableData),\n          parentModel: this._parentModel,\n          instanceProps: this._instanceProps,\n          forwardHostProp: this._forwardHostPropV2,\n          notifyInstanceProp: this._notifyInstancePropV2\n        });\n  },\n\n  /**\n   * Creates an instance of the template prepared by `templatize`.  The object\n   * returned is an instance of the anonymous class generated by `templatize`\n   * whose `root` property is a document fragment containing newly cloned\n   * template content, and which has property accessors corresponding to\n   * properties referenced in template bindings.\n   *\n   * @param {Object=} model Object containing initial property values to\n   *   populate into the template bindings.\n   * @return {TemplateInstanceBase} Returns the created instance of\n   * the template prepared by `templatize`.\n   * @this {TemplatizerUser}\n   */\n  stamp(model) {\n    return new this.ctor(model);\n  },\n\n  /**\n   * Returns the template \"model\" (`TemplateInstance`) associated with\n   * a given element, which serves as the binding scope for the template\n   * instance the element is contained in.  A template model should be used\n   * to manipulate data associated with this template instance.\n   *\n   * @param {HTMLElement} el Element for which to return a template model.\n   * @return {TemplateInstanceBase} Model representing the binding scope for\n   *   the element.\n   * @this {TemplatizerUser}\n   */\n  modelForElement(el) {\n    return modelForElement(this._templatizerTemplate, el);\n  }\n};\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { MutableData } from '../mixins/mutable-data.js';\n\nlet mutablePropertyChange;\n/** @suppress {missingProperties} */\n(() => {\n  mutablePropertyChange = MutableData._mutablePropertyChange;\n})();\n\n/**\n * Legacy element behavior to skip strict dirty-checking for objects and arrays,\n * (always consider them to be \"dirty\") for use on legacy API Polymer elements.\n *\n * By default, `Polymer.PropertyEffects` performs strict dirty checking on\n * objects, which means that any deep modifications to an object or array will\n * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n * references from the root to the mutation were changed).\n *\n * Polymer also provides a proprietary data mutation and path notification API\n * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n * mutation and notification of deep changes in an object graph to all elements\n * bound to the same object graph.\n *\n * In cases where neither immutable patterns nor the data mutation API can be\n * used, applying this mixin will cause Polymer to skip dirty checking for\n * objects and arrays (always consider them to be \"dirty\").  This allows a\n * user to make a deep modification to a bound object graph, and then either\n * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n * elements that wish to be updated based on deep mutations must apply this\n * mixin or otherwise skip strict dirty checking for objects/arrays.\n * Specifically, any elements in the binding tree between the source of a\n * mutation and the consumption of it must apply this behavior or enable the\n * `Polymer.OptionalMutableDataBehavior`.\n *\n * In order to make the dirty check strategy configurable, see\n * `Polymer.OptionalMutableDataBehavior`.\n *\n * Note, the performance characteristics of propagating large object graphs\n * will be worse as opposed to using strict dirty checking with immutable\n * patterns or Polymer's path notification API.\n *\n * @polymerBehavior\n * @summary Behavior to skip strict dirty-checking for objects and\n *   arrays\n */\nexport const MutableDataBehavior = {\n\n  /**\n   * Overrides `Polymer.PropertyEffects` to provide option for skipping\n   * strict equality checking for Objects and Arrays.\n   *\n   * This method pulls the value to dirty check against from the `__dataTemp`\n   * cache (rather than the normal `__data` cache) for Objects.  Since the temp\n   * cache is cleared at the end of a turn, this implementation allows\n   * side-effects of deep object changes to be processed by re-setting the\n   * same object (using the temp cache as an in-turn backstop to prevent\n   * cycles due to 2-way notification).\n   *\n   * @param {string} property Property name\n   * @param {*} value New property value\n   * @param {*} old Previous property value\n   * @return {boolean} Whether the property should be considered a change\n   * @protected\n   * @override\n   */\n  _shouldPropertyChange(property, value, old) {\n    return mutablePropertyChange(this, property, value, old, true);\n  }\n};\n\n/**\n * Legacy element behavior to add the optional ability to skip strict\n * dirty-checking for objects and arrays (always consider them to be\n * \"dirty\") by setting a `mutable-data` attribute on an element instance.\n *\n * By default, `Polymer.PropertyEffects` performs strict dirty checking on\n * objects, which means that any deep modifications to an object or array will\n * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n * references from the root to the mutation were changed).\n *\n * Polymer also provides a proprietary data mutation and path notification API\n * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n * mutation and notification of deep changes in an object graph to all elements\n * bound to the same object graph.\n *\n * In cases where neither immutable patterns nor the data mutation API can be\n * used, applying this mixin will allow Polymer to skip dirty checking for\n * objects and arrays (always consider them to be \"dirty\").  This allows a\n * user to make a deep modification to a bound object graph, and then either\n * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n * elements that wish to be updated based on deep mutations must apply this\n * mixin or otherwise skip strict dirty checking for objects/arrays.\n * Specifically, any elements in the binding tree between the source of a\n * mutation and the consumption of it must enable this behavior or apply the\n * `Polymer.OptionalMutableDataBehavior`.\n *\n * While this behavior adds the ability to forgo Object/Array dirty checking,\n * the `mutableData` flag defaults to false and must be set on the instance.\n *\n * Note, the performance characteristics of propagating large object graphs\n * will be worse by relying on `mutableData: true` as opposed to using\n * strict dirty checking with immutable patterns or Polymer's path notification\n * API.\n *\n * @polymerBehavior\n * @summary Behavior to optionally skip strict dirty-checking for objects and\n *   arrays\n */\nexport const OptionalMutableDataBehavior = {\n\n  properties: {\n    /**\n     * Instance-level flag for configuring the dirty-checking strategy\n     * for this element.  When true, Objects and Arrays will skip dirty\n     * checking, otherwise strict equality checking will be used.\n     */\n    mutableData: Boolean\n  },\n\n  /**\n   * Overrides `Polymer.PropertyEffects` to skip strict equality checking\n   * for Objects and Arrays.\n   *\n   * Pulls the value to dirty check against from the `__dataTemp` cache\n   * (rather than the normal `__data` cache) for Objects.  Since the temp\n   * cache is cleared at the end of a turn, this implementation allows\n   * side-effects of deep object changes to be processed by re-setting the\n   * same object (using the temp cache as an in-turn backstop to prevent\n   * cycles due to 2-way notification).\n   *\n   * @param {string} property Property name\n   * @param {*} value New property value\n   * @param {*} old Previous property value\n   * @return {boolean} Whether the property should be considered a change\n   * @protected\n   * @override\n   */\n  _shouldPropertyChange(property, value, old) {\n    return mutablePropertyChange(this, property, value, old, this.mutableData);\n  }\n};\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { PropertyEffects } from '../mixins/property-effects.js';\nimport { OptionalMutableData } from '../mixins/mutable-data.js';\nimport { GestureEventListeners } from '../mixins/gesture-event-listeners.js';\nimport { strictTemplatePolicy } from '../utils/settings.js';\nimport { wrap } from '../utils/wrap.js';\nimport { hideElementsGlobally } from '../utils/hide-template-controls.js';\n\n/**\n * @constructor\n * @extends {HTMLElement}\n * @implements {Polymer_PropertyEffects}\n * @implements {Polymer_OptionalMutableData}\n * @implements {Polymer_GestureEventListeners}\n * @private\n */\nconst domBindBase =\n  GestureEventListeners(\n    OptionalMutableData(\n      PropertyEffects(HTMLElement)));\n\n/**\n * Custom element to allow using Polymer's template features (data binding,\n * declarative event listeners, etc.) in the main document without defining\n * a new custom element.\n *\n * `<template>` tags utilizing bindings may be wrapped with the `<dom-bind>`\n * element, which will immediately stamp the wrapped template into the main\n * document and bind elements to the `dom-bind` element itself as the\n * binding scope.\n *\n * @polymer\n * @customElement\n * @appliesMixin PropertyEffects\n * @appliesMixin OptionalMutableData\n * @appliesMixin GestureEventListeners\n * @extends {domBindBase}\n * @summary Custom element to allow using Polymer's template features (data\n *   binding, declarative event listeners, etc.) in the main document.\n */\nexport class DomBind extends domBindBase {\n\n  static get observedAttributes() { return ['mutable-data']; }\n\n  constructor() {\n    super();\n    if (strictTemplatePolicy) {\n      throw new Error(`strictTemplatePolicy: dom-bind not allowed`);\n    }\n    this.root = null;\n    this.$ = null;\n    this.__children = null;\n  }\n\n  /* eslint-disable no-unused-vars */\n  /**\n   * @override\n   * @param {string} name Name of attribute that changed\n   * @param {?string} old Old attribute value\n   * @param {?string} value New attribute value\n   * @param {?string} namespace Attribute namespace.\n   * @return {void}\n   */\n  attributeChangedCallback(name, old, value, namespace) {\n    // assumes only one observed attribute\n    this.mutableData = true;\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  connectedCallback() {\n    if (!hideElementsGlobally()) {\n      this.style.display = 'none';\n    }\n    this.render();\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  disconnectedCallback() {\n    this.__removeChildren();\n  }\n\n  __insertChildren() {\n    wrap(wrap(this).parentNode).insertBefore(this.root, this);\n  }\n\n  __removeChildren() {\n    if (this.__children) {\n      for (let i=0; i<this.__children.length; i++) {\n        this.root.appendChild(this.__children[i]);\n      }\n    }\n  }\n\n  /**\n   * Forces the element to render its content. This is typically only\n   * necessary to call if HTMLImports with the async attribute are used.\n   * @return {void}\n   */\n  render() {\n    let template;\n    if (!this.__children) {\n      template = /** @type {?HTMLTemplateElement} */(template || this.querySelector('template'));\n      if (!template) {\n        // Wait until childList changes and template should be there by then\n        let observer = new MutationObserver(() => {\n          template = /** @type {HTMLTemplateElement} */(this.querySelector('template'));\n          if (template) {\n            observer.disconnect();\n            this.render();\n          } else {\n            throw new Error('dom-bind requires a <template> child');\n          }\n        });\n        observer.observe(this, {childList: true});\n        return;\n      }\n      this.root = this._stampTemplate(\n        /** @type {!HTMLTemplateElement} */(template));\n      this.$ = this.root.$;\n      this.__children = [];\n      for (let n=this.root.firstChild; n; n=n.nextSibling) {\n        this.__children[this.__children.length] = n;\n      }\n      this._enableProperties();\n    }\n    this.__insertChildren();\n    this.dispatchEvent(new CustomEvent('dom-change', {\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n}\n\ncustomElements.define('dom-bind', DomBind);\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { PolymerElement } from '../../polymer-element.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { calculateSplices } from '../utils/array-splice.js';\nimport { ElementMixin } from '../mixins/element-mixin.js';\n\n/**\n * Element mixin for recording dynamic associations between item paths in a\n * master `items` array and a `selected` array such that path changes to the\n * master array (at the host) element or elsewhere via data-binding) are\n * correctly propagated to items in the selected array and vice-versa.\n *\n * The `items` property accepts an array of user data, and via the\n * `select(item)` and `deselect(item)` API, updates the `selected` property\n * which may be bound to other parts of the application, and any changes to\n * sub-fields of `selected` item(s) will be kept in sync with items in the\n * `items` array.  When `multi` is false, `selected` is a property\n * representing the last selected item.  When `multi` is true, `selected`\n * is an array of multiply selected items.\n *\n * @polymer\n * @mixinFunction\n * @appliesMixin ElementMixin\n * @summary Element mixin for recording dynamic associations between item paths in a\n * master `items` array and a `selected` array\n */\nlet ArraySelectorMixin = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @implements {Polymer_ElementMixin}\n   * @private\n   */\n  let elementBase = ElementMixin(superClass);\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_ArraySelectorMixin}\n   * @unrestricted\n   */\n  class ArraySelectorMixin extends elementBase {\n\n    static get properties() {\n      return {\n\n        /**\n         * An array containing items from which selection will be made.\n         */\n        items: {\n          type: Array,\n        },\n\n        /**\n         * When `true`, multiple items may be selected at once (in this case,\n         * `selected` is an array of currently selected items).  When `false`,\n         * only one item may be selected at a time.\n         */\n        multi: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * When `multi` is true, this is an array that contains any selected.\n         * When `multi` is false, this is the currently selected item, or `null`\n         * if no item is selected.\n         * @type {?Object|?Array<!Object>}\n         */\n        selected: {type: Object, notify: true},\n\n        /**\n         * When `multi` is false, this is the currently selected item, or `null`\n         * if no item is selected.\n         * @type {?Object}\n         */\n        selectedItem: {type: Object, notify: true},\n\n        /**\n         * When `true`, calling `select` on an item that is already selected\n         * will deselect the item.\n         */\n        toggle: {type: Boolean, value: false}\n\n      };\n    }\n\n    static get observers() {\n      return ['__updateSelection(multi, items.*)'];\n    }\n\n    constructor() {\n      super();\n      this.__lastItems = null;\n      this.__lastMulti = null;\n      this.__selectedMap = null;\n    }\n\n    __updateSelection(multi, itemsInfo) {\n      let path = itemsInfo.path;\n      if (path == JSCompiler_renameProperty('items', this)) {\n        // Case 1 - items array changed, so diff against previous array and\n        // deselect any removed items and adjust selected indices\n        let newItems = itemsInfo.base || [];\n        let lastItems = this.__lastItems;\n        let lastMulti = this.__lastMulti;\n        if (multi !== lastMulti) {\n          this.clearSelection();\n        }\n        if (lastItems) {\n          let splices = calculateSplices(newItems, lastItems);\n          this.__applySplices(splices);\n        }\n        this.__lastItems = newItems;\n        this.__lastMulti = multi;\n      } else if (itemsInfo.path == `${JSCompiler_renameProperty('items', this)}.splices`) {\n        // Case 2 - got specific splice information describing the array mutation:\n        // deselect any removed items and adjust selected indices\n        this.__applySplices(itemsInfo.value.indexSplices);\n      } else {\n        // Case 3 - an array element was changed, so deselect the previous\n        // item for that index if it was previously selected\n        let part = path.slice(`${JSCompiler_renameProperty('items', this)}.`.length);\n        let idx = parseInt(part, 10);\n        if ((part.indexOf('.') < 0) && part == idx) {\n          this.__deselectChangedIdx(idx);\n        }\n      }\n    }\n\n    __applySplices(splices) {\n      let selected = this.__selectedMap;\n      // Adjust selected indices and mark removals\n      for (let i=0; i<splices.length; i++) {\n        let s = splices[i];\n        selected.forEach((idx, item) => {\n          if (idx < s.index) {\n            // no change\n          } else if (idx >= s.index + s.removed.length) {\n            // adjust index\n            selected.set(item, idx + s.addedCount - s.removed.length);\n          } else {\n            // remove index\n            selected.set(item, -1);\n          }\n        });\n        for (let j=0; j<s.addedCount; j++) {\n          let idx = s.index + j;\n          if (selected.has(this.items[idx])) {\n            selected.set(this.items[idx], idx);\n          }\n        }\n      }\n      // Update linked paths\n      this.__updateLinks();\n      // Remove selected items that were removed from the items array\n      let sidx = 0;\n      selected.forEach((idx, item) => {\n        if (idx < 0) {\n          if (this.multi) {\n            this.splice(JSCompiler_renameProperty('selected', this), sidx, 1);\n          } else {\n            this.selected = this.selectedItem = null;\n          }\n          selected.delete(item);\n        } else {\n          sidx++;\n        }\n      });\n    }\n\n    __updateLinks() {\n      this.__dataLinkedPaths = {};\n      if (this.multi) {\n        let sidx = 0;\n        this.__selectedMap.forEach(idx => {\n          if (idx >= 0) {\n            this.linkPaths(\n                `${JSCompiler_renameProperty('items', this)}.${idx}`,\n                `${JSCompiler_renameProperty('selected', this)}.${sidx++}`);\n          }\n        });\n      } else {\n        this.__selectedMap.forEach(idx => {\n          this.linkPaths(\n              JSCompiler_renameProperty('selected', this),\n              `${JSCompiler_renameProperty('items', this)}.${idx}`);\n          this.linkPaths(\n              JSCompiler_renameProperty('selectedItem', this),\n              `${JSCompiler_renameProperty('items', this)}.${idx}`);\n        });\n      }\n    }\n\n    /**\n     * Clears the selection state.\n     * @override\n     * @return {void}\n     */\n    clearSelection() {\n      // Unbind previous selection\n      this.__dataLinkedPaths = {};\n      // The selected map stores 3 pieces of information:\n      // key: items array object\n      // value: items array index\n      // order: selected array index\n      this.__selectedMap = new Map();\n      // Initialize selection\n      this.selected = this.multi ? [] : null;\n      this.selectedItem = null;\n    }\n\n    /**\n     * Returns whether the item is currently selected.\n     *\n     * @override\n     * @param {*} item Item from `items` array to test\n     * @return {boolean} Whether the item is selected\n     */\n    isSelected(item) {\n      return this.__selectedMap.has(item);\n    }\n\n    /**\n     * Returns whether the item is currently selected.\n     *\n     * @override\n     * @param {number} idx Index from `items` array to test\n     * @return {boolean} Whether the item is selected\n     */\n    isIndexSelected(idx) {\n      return this.isSelected(this.items[idx]);\n    }\n\n    __deselectChangedIdx(idx) {\n      let sidx = this.__selectedIndexForItemIndex(idx);\n      if (sidx >= 0) {\n        let i = 0;\n        this.__selectedMap.forEach((idx, item) => {\n          if (sidx == i++) {\n            this.deselect(item);\n          }\n        });\n      }\n    }\n\n    __selectedIndexForItemIndex(idx) {\n      let selected = this.__dataLinkedPaths[`${JSCompiler_renameProperty('items', this)}.${idx}`];\n      if (selected) {\n        return parseInt(selected.slice(`${JSCompiler_renameProperty('selected', this)}.`.length), 10);\n      }\n    }\n\n    /**\n     * Deselects the given item if it is already selected.\n     *\n     * @override\n     * @param {*} item Item from `items` array to deselect\n     * @return {void}\n     */\n    deselect(item) {\n      let idx = this.__selectedMap.get(item);\n      if (idx >= 0) {\n        this.__selectedMap.delete(item);\n        let sidx;\n        if (this.multi) {\n          sidx = this.__selectedIndexForItemIndex(idx);\n        }\n        this.__updateLinks();\n        if (this.multi) {\n          this.splice(JSCompiler_renameProperty('selected', this), sidx, 1);\n        } else {\n          this.selected = this.selectedItem = null;\n        }\n      }\n    }\n\n    /**\n     * Deselects the given index if it is already selected.\n     *\n     * @override\n     * @param {number} idx Index from `items` array to deselect\n     * @return {void}\n     */\n    deselectIndex(idx) {\n      this.deselect(this.items[idx]);\n    }\n\n    /**\n     * Selects the given item.  When `toggle` is true, this will automatically\n     * deselect the item if already selected.\n     *\n     * @override\n     * @param {*} item Item from `items` array to select\n     * @return {void}\n     */\n    select(item) {\n      this.selectIndex(this.items.indexOf(item));\n    }\n\n    /**\n     * Selects the given index.  When `toggle` is true, this will automatically\n     * deselect the item if already selected.\n     *\n     * @override\n     * @param {number} idx Index from `items` array to select\n     * @return {void}\n     */\n    selectIndex(idx) {\n      let item = this.items[idx];\n      if (!this.isSelected(item)) {\n        if (!this.multi) {\n          this.__selectedMap.clear();\n        }\n        this.__selectedMap.set(item, idx);\n        this.__updateLinks();\n        if (this.multi) {\n          this.push(JSCompiler_renameProperty('selected', this), item);\n        } else {\n          this.selected = this.selectedItem = item;\n        }\n      } else if (this.toggle) {\n        this.deselectIndex(idx);\n      }\n    }\n\n  }\n\n  return ArraySelectorMixin;\n\n});\n\n// export mixin\nexport { ArraySelectorMixin };\n\n/**\n * @constructor\n * @extends {PolymerElement}\n * @implements {Polymer_ArraySelectorMixin}\n * @private\n */\nlet baseArraySelector = ArraySelectorMixin(PolymerElement);\n\n/**\n * Element implementing the `ArraySelector` mixin, which records\n * dynamic associations between item paths in a master `items` array and a\n * `selected` array such that path changes to the master array (at the host)\n * element or elsewhere via data-binding) are correctly propagated to items\n * in the selected array and vice-versa.\n *\n * The `items` property accepts an array of user data, and via the\n * `select(item)` and `deselect(item)` API, updates the `selected` property\n * which may be bound to other parts of the application, and any changes to\n * sub-fields of `selected` item(s) will be kept in sync with items in the\n * `items` array.  When `multi` is false, `selected` is a property\n * representing the last selected item.  When `multi` is true, `selected`\n * is an array of multiply selected items.\n *\n * Example:\n *\n * ```js\n * import {PolymerElement} from '@polymer/polymer';\n * import '@polymer/polymer/lib/elements/array-selector.js';\n *\n * class EmployeeList extends PolymerElement {\n *   static get _template() {\n *     return html`\n *         <div> Employee list: </div>\n *         <dom-repeat id=\"employeeList\" items=\"{{employees}}\">\n *           <template>\n *             <div>First name: <span>{{item.first}}</span></div>\n *               <div>Last name: <span>{{item.last}}</span></div>\n *               <button on-click=\"toggleSelection\">Select</button>\n *           </template>\n *         </dom-repeat>\n *\n *         <array-selector id=\"selector\"\n *                         items=\"{{employees}}\"\n *                         selected=\"{{selected}}\"\n *                         multi toggle></array-selector>\n *\n *         <div> Selected employees: </div>\n *         <dom-repeat items=\"{{selected}}\">\n *           <template>\n *             <div>First name: <span>{{item.first}}</span></div>\n *             <div>Last name: <span>{{item.last}}</span></div>\n *           </template>\n *         </dom-repeat>`;\n *   }\n *   static get is() { return 'employee-list'; }\n *   static get properties() {\n *     return {\n *       employees: {\n *         value() {\n *           return [\n *             {first: 'Bob', last: 'Smith'},\n *             {first: 'Sally', last: 'Johnson'},\n *             ...\n *           ];\n *         }\n *       }\n *     };\n *   }\n *   toggleSelection(e) {\n *     const item = this.$.employeeList.itemForElement(e.target);\n *     this.$.selector.select(item);\n *   }\n * }\n * ```\n *\n * @polymer\n * @customElement\n * @extends {baseArraySelector}\n * @appliesMixin ArraySelectorMixin\n * @summary Custom element that links paths between an input `items` array and\n *   an output `selected` item or array based on calls to its selection API.\n */\nclass ArraySelector extends baseArraySelector {\n  // Not needed to find template; can be removed once the analyzer\n  // can find the tag name from customElements.define call\n  static get is() { return 'array-selector'; }\n  static get template() { return null; }\n}\ncustomElements.define(ArraySelector.is, ArraySelector);\nexport { ArraySelector };\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport { LegacyElementMixin } from './lib/legacy/legacy-element-mixin.js';\nexport { Polymer } from  './lib/legacy/polymer-fn.js';\n/* template elements */\nimport './lib/legacy/templatizer-behavior.js';\nimport './lib/elements/dom-bind.js';\nimport './lib/elements/dom-repeat.js';\nimport './lib/elements/dom-if.js';\nimport './lib/elements/array-selector.js';\n/* custom-style */\nimport './lib/elements/custom-style.js';\n/* bc behaviors */\nimport './lib/legacy/mutable-data-behavior.js';\n/* import html-tag to export html */\nexport { html } from './lib/utils/html-tag.js';\n\n// bc\nexport const Base = LegacyElementMixin(HTMLElement).prototype;\n"],
  "mappings": "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",
  "names": ["ArraySelectorMixin", "idx"]
}
