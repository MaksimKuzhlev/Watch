{
  "version": 3,
  "sources": ["../../@flowingcode/google-map/google-map-poly.js"],
  "sourcesContent": ["import { Polymer } from '../../@polymer/polymer/lib/legacy/polymer-fn.js';\r\nimport { html } from '../../@polymer/polymer/lib/utils/html-tag.js';\r\nimport './google-map-point.js';\r\n\r\nPolymer({\r\n  _template: html`\r\n    <style>\r\n      :host {\r\n        display: none;\r\n      }\r\n    </style>\r\n\r\n    <slot id=\"points\"></slot>\r\n`,\r\n\r\n  is: 'google-map-poly',\r\n\r\n  /**\r\n   * Fired when the `path` property is built based on child `google-map-point` elements, either\r\n   * initially or when they are changed.\r\n   *\r\n   * @event google-map-poly-path-built\r\n   * @param {google.maps.MVCArray.<LatLng>} path The poly path.\r\n   */\r\n\r\n  /**\r\n   * Fired when the user finishes adding vertices to the poly. The host component can use the\r\n   * provided path to rebuild its list of points.\r\n   *\r\n   * @event google-map-poly-path-updated\r\n   * @param {google.maps.MVCArray.<LatLng>} path The poly path.\r\n   */\r\n\r\n  /**\r\n   * Fired when the DOM `click` event is fired on the poly. Requires the clickEvents and clickable attribute to\r\n   * be true.\r\n   *\r\n   * @event google-map-poly-click\r\n   * @param {google.maps.PolyMouseEvent} event The poly event.\r\n   */\r\n\r\n  /**\r\n   * Fired when the DOM `dblclick` event is fired on the poly. Requires the clickEvents and clickable attribute\r\n   * to be true.\r\n   *\r\n   * @event google-map-poly-dblclick\r\n   * @param {google.maps.PolyMouseEvent} event The poly event.\r\n   */\r\n\r\n  /**\r\n   * Fired repeatedly while the user drags the poly. Requires the dragEvents attribute to be true.\r\n   *\r\n   * @event google-map-poly-drag\r\n   * @param {google.maps.MouseEvent} event The mouse event.\r\n   */\r\n\r\n  /**\r\n   * Fired when the user stops dragging the poly. Requires the dragEvents attribute to be true.\r\n   *\r\n   * @event google-map-poly-dragend\r\n   * @param {google.maps.MouseEvent} event The mouse event.\r\n   */\r\n\r\n  /**\r\n   * Fired when the user starts dragging the poly. Requires the dragEvents attribute to be true.\r\n   *\r\n   * @event google-map-poly-dragstart\r\n   * @param {google.maps.MouseEvent} event The mouse event.\r\n   */\r\n\r\n  /**\r\n   * Fired when the DOM `mousedown` event is fired on the poly. Requires the mouseEvents attribute\r\n   * to be true.\r\n   *\r\n   * @event google-map-poly-mousedown\r\n   * @param {google.maps.PolyMouseEvent} event The poly event.\r\n   */\r\n\r\n  /**\r\n   * Fired when the DOM `mousemove` event is fired on the poly. Requires the mouseEvents attribute\r\n   * to be true.\r\n   *\r\n   * @event google-map-poly-mousemove\r\n   * @param {google.maps.PolyMouseEvent} event The poly event.\r\n   */\r\n\r\n  /**\r\n   * Fired on poly mouseout. Requires the mouseEvents attribute to be true.\r\n   *\r\n   * @event google-map-poly-mouseout\r\n   * @param {google.maps.PolyMouseEvent} event The poly event.\r\n   */\r\n\r\n  /**\r\n   * Fired on poly mouseover. Requires the mouseEvents attribute to be true.\r\n   *\r\n   * @event google-map-poly-mouseover\r\n   * @param {google.maps.PolyMouseEvent} event The poly event.\r\n   */\r\n\r\n  /**\r\n   * Fired when the DOM `mouseup` event is fired on the poly. Requires the mouseEvents attribute\r\n   * to be true.\r\n   *\r\n   * @event google-map-poly-mouseup\r\n   * @param {google.maps.PolyMouseEvent} event The poly event.\r\n   */\r\n\r\n  /**\r\n   * Fired when the poly is right-clicked on. Requires the clickEvents attribute to be true.\r\n   *\r\n   * @event google-map-poly-rightclick\r\n   * @param {google.maps.PolyMouseEvent} event The poly event.\r\n   */\r\n\r\n  /**\r\n   * Polymer properties for the google-map-poly element.\r\n   */\r\n  properties: {\r\n    /**\r\n     * A Google Maps polyline or polygon object (depending on value of \"closed\" attribute).\r\n     *\r\n     * @type {google.maps.Polyline|google.maps.Polygon}\r\n     */\r\n    poly: {\r\n      type: Object,\r\n      readOnly: true,\r\n    },\r\n\r\n    /**\r\n     * An array of the Google Maps LatLng objects that define the poly shape.\r\n     *\r\n     * @type google.maps.MVCArray.<LatLng>\r\n     */\r\n    path: {\r\n      type: Object,\r\n      readOnly: true,\r\n    },\r\n\r\n    /**\r\n     * The Google map object.\r\n     *\r\n     * @type google.maps.Map\r\n     */\r\n    map: {\r\n      type: Object,\r\n      observer: '_mapChanged',\r\n    },\r\n\r\n    /**\r\n     * When true, the poly will generate mouse events.\r\n     */\r\n    clickable: {\r\n      type: Boolean,\r\n      value: false,\r\n      observer: '_clickableChanged',\r\n    },\r\n\r\n    /**\r\n     * When true, the google-map-poly-*click events will be automatically registered.\r\n     */\r\n    clickEvents: {\r\n      type: Boolean,\r\n      value: false,\r\n      observer: '_clickEventsChanged',\r\n    },\r\n\r\n    /**\r\n     * When true, the path will be closed by connecting the last point to the first one and\r\n     * treating the poly as a polygon.\r\n     */\r\n    closed: {\r\n      type: Boolean,\r\n      value: false,\r\n      observer: '_closedChanged',\r\n    },\r\n\r\n    /**\r\n     * When true, the google-map-poly-drag* events will be automatically registered.\r\n     */\r\n    dragEvents: {\r\n      type: Boolean,\r\n      value: false,\r\n      observer: '_dragEventsChanged',\r\n    },\r\n\r\n    /**\r\n     * When true, the poly's vertices may be individually moved or new ones added.\r\n     */\r\n    editable: {\r\n      type: Boolean,\r\n      value: false,\r\n      observer: '_editableChanged',\r\n    },\r\n\r\n    /**\r\n     * When true, indicates that the user has begun editing the poly path (adding vertices).\r\n     */\r\n    editing: {\r\n      type: Boolean,\r\n      value: false,\r\n      notify: true,\r\n      readOnly: true,\r\n    },\r\n\r\n    /**\r\n     * If the path is closed, the polygon fill color. All CSS3 colors are supported except for\r\n     * extended named colors.\r\n     */\r\n    fillColor: {\r\n      type: String,\r\n      value: '',\r\n      observer: '_fillColorChanged',\r\n    },\r\n\r\n    /**\r\n     * If the path is closed, the polygon fill opacity (between 0.0 and 1.0).\r\n     */\r\n    fillOpacity: {\r\n      type: Number,\r\n      value: 0,\r\n      observer: '_fillOpacityChanged',\r\n    },\r\n\r\n    /**\r\n     * When true, the poly's edges are interpreted as geodesic and will follow the curvature of\r\n     * the Earth. When not set, the poly's edges are rendered as straight lines in screen space.\r\n     * Note that the poly of a geodesic poly may appear to change when dragged, as the dimensions\r\n     * are maintained relative to the surface of the earth.\r\n     */\r\n    geodesic: {\r\n      type: Boolean,\r\n      value: false,\r\n      observer: '_geodesicChanged',\r\n    },\r\n\r\n    /**\r\n     * If the path is not closed, the icons to be rendered along the polyline.\r\n     */\r\n    icons: {\r\n      type: Array,\r\n      value: null,\r\n      observer: '_iconsChanged',\r\n    },\r\n\r\n    /**\r\n     * When true, the google-map-poly-mouse* events will be automatically registered.\r\n     */\r\n    mouseEvents: {\r\n      type: Boolean,\r\n      value: false,\r\n      observer: '_mouseEventsChanged',\r\n    },\r\n\r\n    /**\r\n     * The color to draw the poly's stroke with. All CSS3 colors are supported except for extended\r\n     * named colors.\r\n     */\r\n    strokeColor: {\r\n      type: String,\r\n      value: 'black',\r\n      observer: '_strokeColorChanged',\r\n    },\r\n\r\n    /**\r\n     * The stroke opacity (between 0.0 and 1.0).\r\n     */\r\n    strokeOpacity: {\r\n      type: Number,\r\n      value: 1,\r\n      observer: '_strokeOpacityChanged',\r\n    },\r\n\r\n    /**\r\n     * The stroke position (center, inside, or outside).\r\n     */\r\n    strokePosition: {\r\n      type: String,\r\n      value: 'center',\r\n      observer: '_strokePositionChanged',\r\n    },\r\n\r\n    /**\r\n     * The stroke width in pixels.\r\n     */\r\n    strokeWeight: {\r\n      type: Number,\r\n      value: 3,\r\n      observer: '_strokeWeightChanged',\r\n    },\r\n\r\n    /**\r\n     * The Z-index relative to other objects on the map.\r\n     */\r\n    zIndex: {\r\n      type: Number,\r\n      value: 0,\r\n      observer: '_zIndexChanged',\r\n    },\r\n  },\r\n\r\n  // Lifecycle event handlers.\r\n\r\n  detached() {\r\n    if(this.poly) {\r\n      this._listeners = {};\r\n      this.poly.setMap(null);\r\n    }\r\n    if (this._pointsObserver) {\r\n      this._pointsObserver.disconnect();\r\n      this._pointsObserver = null;\r\n    } \r\n  },\r\n\r\n  attached() {\r\n    // If element is added back to DOM, put it back on the map.\r\n    this.poly && this.poly.setMap(this.map);\r\n  },\r\n\r\n  // Attribute/property change watchers.\r\n\r\n  attributeChanged(attrName) {\r\n    if (!this.poly) {\r\n      return;\r\n    }\r\n\r\n    // Cannot use *Changed watchers for native properties.\r\n    switch (attrName) {\r\n      case 'hidden':\r\n        this.poly.setVisible(!this.hidden);\r\n        break;\r\n      case 'draggable':\r\n        this.poly.setDraggable(this.draggable);\r\n        break;\r\n    }\r\n  },\r\n\r\n  _clickableChanged() {\r\n    this.poly && this.poly.set('clickable', this.clickable);\r\n  },\r\n\r\n  _clickEventsChanged() {\r\n    if (this.poly) {\r\n      if (this.clickEvents) {\r\n        this._forwardEvent('click');\r\n        this._forwardEvent('dblclick');\r\n        this._forwardEvent('rightclick');\r\n      } else {\r\n        this._clearListener('click');\r\n        this._clearListener('dblclick');\r\n        this._clearListener('rightclick');\r\n      }\r\n    }\r\n  },\r\n\r\n  _closedChanged() {\r\n    this._mapChanged();\r\n  },\r\n\r\n  _dragEventsChanged() {\r\n    if (this.poly) {\r\n      if (this.clickEvents) {\r\n        this._forwardEvent('drag');\r\n        this._forwardEvent('dragend');\r\n        this._forwardEvent('dragstart');\r\n      } else {\r\n        this._clearListener('drag');\r\n        this._clearListener('dragend');\r\n        this._clearListener('dragstart');\r\n      }\r\n    }\r\n  },\r\n\r\n  _editableChanged() {\r\n    this.poly && this.poly.setEditable(this.editable);\r\n  },\r\n\r\n  _fillColorChanged() {\r\n    this.poly && this.poly.set('fillColor', this.fillColor);\r\n  },\r\n\r\n  _fillOpacityChanged() {\r\n    this.poly && this.poly.set('fillOpacity', this.fillOpacity);\r\n  },\r\n\r\n  _geodesicChanged() {\r\n    this.poly && this.poly.set('geodesic', this.geodesic);\r\n  },\r\n\r\n  _iconsChanged() {\r\n    this.poly && this.poly.set('icons', this.icons);\r\n  },\r\n\r\n  _mapChanged() {\r\n    // Poly will be rebuilt, so disconnect existing one from old map and listeners.\r\n    if (this.poly) {\r\n      this.poly.setMap(null);\r\n      google.maps.event.clearInstanceListeners(this.poly);\r\n    }\r\n\r\n    if (this.map && this.map instanceof google.maps.Map) {\r\n      this._createPoly();\r\n    }\r\n  },\r\n\r\n  _mouseEventsChanged() {\r\n    if (this.poly) {\r\n      if (this.mouseEvents) {\r\n        this._forwardEvent('mousedown');\r\n        this._forwardEvent('mousemove');\r\n        this._forwardEvent('mouseout');\r\n        this._forwardEvent('mouseover');\r\n        this._forwardEvent('mouseup');\r\n      } else {\r\n        this._clearListener('mousedown');\r\n        this._clearListener('mousemove');\r\n        this._clearListener('mouseout');\r\n        this._clearListener('mouseover');\r\n        this._clearListener('mouseup');\r\n      }\r\n    }\r\n  },\r\n\r\n  _strokeColorChanged() {\r\n    this.poly && this.poly.set('strokeColor', this.strokeColor);\r\n  },\r\n\r\n  _strokeOpacityChanged() {\r\n    this.poly && this.poly.set('strokeOpacity', this.strokeOpacity);\r\n  },\r\n\r\n  _strokePositionChanged() {\r\n    this.poly && this.poly.set('strokePosition', this._convertStrokePosition());\r\n  },\r\n\r\n  _strokeWeightChanged() {\r\n    this.poly && this.poly.set('strokeWeight', this.strokeWeight);\r\n  },\r\n\r\n  _zIndexChanged() {\r\n    this.poly && this.poly.set('zIndex', this.zIndex);\r\n  },\r\n\r\n  // Helper logic.\r\n\r\n  _buildPathFromPoints() {\r\n    this._points = Array.prototype.slice.call(this.$.points.assignedNodes({ flatten: true }))\r\n      .filter(n => n.nodeName !== '#text');\r\n\r\n    // Build path from current points (ignoring vertex insertions while doing so).\r\n    this._building = true;\r\n    this.path.clear();\r\n    for (var i = 0, point; point = this._points[i]; ++i) {\r\n      let tagName = point.tagName;\r\n\r\n      if (tagName) {\r\n        tagName = tagName.toLowerCase();\r\n\r\n        if (tagName == 'google-map-point') {\r\n          this.path.push(point.getPosition());\r\n        }\r\n      }\r\n    }\r\n    this._building = false;\r\n\r\n    this.fire('google-map-poly-path-built', this.path);\r\n\r\n    // Watch for future updates.\r\n    if (this._pointsObserver) {\r\n      return;\r\n    }\r\n    this._pointsObserver = new MutationObserver(this._buildPathFromPoints.bind(this));\r\n    this._pointsObserver.observe(this, {\r\n      subtree: true,\r\n      attributes: true,\r\n    });\r\n  },\r\n\r\n  _clearListener(name) {\r\n    if (this._listeners[name]) {\r\n      google.maps.event.removeListener(this._listeners[name]);\r\n      this._listeners[name] = null;\r\n    }\r\n  },\r\n\r\n  _convertStrokePosition() {\r\n    return google.maps.StrokePosition && this.strokePosition ?\r\n      google.maps.StrokePosition[this.strokePosition.toUpperCase()] : 0;\r\n  },\r\n\r\n  _createPoly() {\r\n    // Build poly's path and register mutation listeners on first creation.\r\n    if (!this.path) {\r\n      this._setPath(new google.maps.MVCArray());\r\n      google.maps.event.addListener(this.path, 'insert_at', this._startEditing.bind(this));\r\n      google.maps.event.addListener(this.path, 'set_at', this._updatePoint.bind(this));\r\n      this._buildPathFromPoints();\r\n    }\r\n\r\n    const options = {\r\n      clickable: this.clickable || this.draggable, // draggable must be clickable to work.\r\n      draggable: this.draggable,\r\n      editable: this.editable,\r\n      geodesic: this.geodesic,\r\n      map: this.map,\r\n      path: this.path,\r\n      strokeColor: this.strokeColor,\r\n      strokeOpacity: this.strokeOpacity,\r\n      strokePosition: this._convertStrokePosition(),\r\n      strokeWeight: this.strokeWeight,\r\n      visible: !this.hidden,\r\n      zIndex: this.zIndex,\r\n    };\r\n\r\n    if (this.closed) {\r\n      options.fillColor = this.fillColor;\r\n      options.fillOpacity = this.fillOpacity;\r\n      this._setPoly(new google.maps.Polygon(options));\r\n    } else {\r\n      options.icons = this.icons;\r\n      this._setPoly(new google.maps.Polyline(options));\r\n    }\r\n\r\n    this._listeners = {};\r\n    this._clickEventsChanged();\r\n    this._mouseEventsChanged();\r\n    this._dragEventsChanged();\r\n  },\r\n\r\n  _forwardEvent(name) {\r\n    this._listeners[name] = google.maps.event.addListener(this.poly, name, (event) => {\r\n      this.fire(`google-map-poly-${name}`, event);\r\n    });\r\n  },\r\n\r\n  _startEditing(index) {\r\n    if (this._building) {\r\n      // Ignore changes while building path.\r\n      return;\r\n    }\r\n\r\n    // Signal start of editing when first vertex inserted, end when map clicked.\r\n    if (!this.editing) {\r\n      this._setEditing(true);\r\n      // The poly path and google-map-point elements lose sync once the user starts adding points,\r\n      // so invalidate the _points array.\r\n      this._points = null;\r\n      google.maps.event.addListenerOnce(this.map, 'click', () => {\r\n        this._setEditing(false);\r\n        this.fire('google-map-poly-path-updated', this.path);\r\n      });\r\n    }\r\n  },\r\n\r\n  _updatePoint(index, vertex) {\r\n    // Ignore changes if path is out of sync with google-map-point elements.\r\n    if (!this._points) {\r\n      return;\r\n    }\r\n\r\n    // Update existing point so bound properties are updated. too.\r\n    this._points[index].latitude = vertex.lat();\r\n    this._points[index].longitude = vertex.lng();\r\n  },\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
