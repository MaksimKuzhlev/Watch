{
  "version": 3,
  "sources": ["../../@flowingcode/google-map/google-map-marker.js"],
  "sourcesContent": ["import { Polymer } from '../../@polymer/polymer/lib/legacy/polymer-fn.js';\r\nimport { html } from '../../@polymer/polymer/lib/utils/html-tag.js';\r\n\r\nfunction setupDragHandler_() {\r\n  if (this.draggable) {\r\n    this.dragHandler_ = google.maps.event.addListener(this.marker, 'dragend', onDragEnd_.bind(this));\r\n  } else {\r\n    google.maps.event.removeListener(this.dragHandler_);\r\n    this.dragHandler_ = null;\r\n  }\r\n}\r\n\r\nfunction onDragEnd_(e, details, sender) {\r\n  this.latitude = e.latLng.lat();\r\n  this.longitude = e.latLng.lng();\r\n}\r\n\r\nPolymer({\r\n  _template: html`\r\n    <style>\r\n      :host {\r\n        display: none;\r\n      }\r\n    </style>\r\n\r\n    <slot></slot>\r\n`,\r\n\r\n  is: 'google-map-marker',\r\n\r\n  /**\r\n   * Fired when the marker icon was clicked. Requires the clickEvents attribute to be true.\r\n   *\r\n   * @param {google.maps.MouseEvent} event The mouse event.\r\n   * @event google-map-marker-click\r\n   */\r\n\r\n  /**\r\n   * Fired when the marker icon was double clicked. Requires the clickEvents attribute to be true.\r\n   *\r\n   * @param {google.maps.MouseEvent} event The mouse event.\r\n   * @event google-map-marker-dblclick\r\n   */\r\n\r\n  /**\r\n   * Fired repeatedly while the user drags the marker. Requires the dragEvents attribute to be true.\r\n   *\r\n   * @event google-map-marker-drag\r\n   */\r\n\r\n  /**\r\n   * Fired when the user stops dragging the marker. Requires the dragEvents attribute to be true.\r\n   *\r\n   * @event google-map-marker-dragend\r\n   */\r\n\r\n  /**\r\n   * Fired when the user starts dragging the marker. Requires the dragEvents attribute to be true.\r\n   *\r\n   * @event google-map-marker-dragstart\r\n   */\r\n\r\n  /**\r\n   * Fired for a mousedown on the marker. Requires the mouseEvents attribute to be true.\r\n   *\r\n   * @event google-map-marker-mousedown\r\n   * @param {google.maps.MouseEvent} event The mouse event.\r\n   */\r\n\r\n  /**\r\n   * Fired when the DOM `mousemove` event is fired on the marker. Requires the mouseEvents\r\n   * attribute to be true.\r\n   *\r\n   * @event google-map-marker-mousemove\r\n   * @param {google.maps.MouseEvent} event The mouse event.\r\n   */\r\n\r\n  /**\r\n   * Fired when the mouse leaves the area of the marker icon. Requires the mouseEvents attribute to be\r\n   * true.\r\n   *\r\n   * @event google-map-marker-mouseout\r\n   * @param {google.maps.MouseEvent} event The mouse event.\r\n   */\r\n\r\n  /**\r\n   * Fired when the mouse enters the area of the marker icon. Requires the mouseEvents attribute to be\r\n   * true.\r\n   *\r\n   * @event google-map-marker-mouseover\r\n   * @param {google.maps.MouseEvent} event The mouse event.\r\n   */\r\n\r\n  /**\r\n   * Fired for a mouseup on the marker. Requires the mouseEvents attribute to be true.\r\n   *\r\n   * @event google-map-marker-mouseup\r\n   * @param {google.maps.MouseEvent} event The mouse event.\r\n   */\r\n\r\n  /**\r\n   * Fired for a rightclick on the marker. Requires the clickEvents attribute to be true.\r\n   *\r\n   * @event google-map-marker-rightclick\r\n   * @param {google.maps.MouseEvent} event The mouse event.\r\n   */\r\n\r\n  /**\r\n   * Fired when an infowindow is opened.\r\n   *\r\n   * @event google-map-marker-open\r\n   */\r\n\r\n  /**\r\n   * Fired when the close button of the infowindow is pressed.\r\n   *\r\n   * @event google-map-marker-close\r\n   */\r\n\r\n  properties: {\r\n    /**\r\n     * A Google Maps marker object.\r\n     *\r\n     * @type google.maps.Marker\r\n     */\r\n    marker: {\r\n      type: Object,\r\n      notify: true,\r\n    },\r\n\r\n    /**\r\n     * The Google map object.\r\n     *\r\n     * @type google.maps.Map\r\n     */\r\n    map: {\r\n      type: Object,\r\n      observer: '_mapChanged',\r\n    },\r\n\r\n    /**\r\n     * A Google Map Infowindow object.\r\n     *\r\n     * @type {?Object}\r\n     */\r\n    info: {\r\n      type: Object,\r\n      value: null,\r\n    },\r\n\r\n    /**\r\n     * When true, marker *click events are automatically registered.\r\n     */\r\n    clickEvents: {\r\n      type: Boolean,\r\n      value: false,\r\n      observer: '_clickEventsChanged',\r\n    },\r\n\r\n    /**\r\n     * When true, marker drag* events are automatically registered.\r\n     */\r\n    dragEvents: {\r\n      type: Boolean,\r\n      value: false,\r\n      observer: '_dragEventsChanged',\r\n    },\r\n\r\n    /**\r\n     * Image URL for the marker icon.\r\n     *\r\n     * @type string|google.maps.Icon|google.maps.Symbol\r\n     */\r\n    icon: {\r\n      type: Object,\r\n      value: null,\r\n      observer: '_iconChanged',\r\n    },\r\n\r\n    /**\r\n     * When true, marker mouse* events are automatically registered.\r\n     */\r\n    mouseEvents: {\r\n      type: Boolean,\r\n      value: false,\r\n      observer: '_mouseEventsChanged',\r\n    },\r\n\r\n    /**\r\n     * Z-index for the marker icon.\r\n     */\r\n    zIndex: {\r\n      type: Number,\r\n      value: 0,\r\n      observer: '_zIndexChanged',\r\n    },\r\n\r\n    /**\r\n     * The marker's longitude coordinate.\r\n     */\r\n    longitude: {\r\n      type: Number,\r\n      value: null,\r\n      notify: true,\r\n    },\r\n\r\n    /**\r\n     * The marker's latitude coordinate.\r\n     */\r\n    latitude: {\r\n      type: Number,\r\n      value: null,\r\n      notify: true,\r\n    },\r\n\r\n    /**\r\n     * The marker's label.\r\n     */\r\n    label: {\r\n      type: String,\r\n      value: null,\r\n      observer: '_labelChanged',\r\n    },\r\n\r\n    /**\r\n     * A animation for the marker. \"DROP\" or \"BOUNCE\". See\r\n     * https://developers.google.com/maps/documentation/javascript/examples/marker-animations.\r\n     */\r\n    animation: {\r\n      type: String,\r\n      value: null,\r\n      observer: '_animationChanged',\r\n    },\r\n\r\n    /**\r\n     * Specifies whether the InfoWindow is open or not\r\n     */\r\n    open: {\r\n      type: Boolean,\r\n      value: false,\r\n      observer: '_openChanged',\r\n    },\r\n  },\r\n\r\n  observers: [\r\n    '_updatePosition(latitude, longitude)',\r\n  ],\r\n\r\n  detached() {\r\n    if (this.marker) {\r\n      this._listeners = {};\r\n      this.setMap(null);\r\n    }\r\n    if (this._contentObserver) { this._contentObserver.disconnect(); }\r\n  },\r\n\r\n  attached() {\r\n    // If element is added back to DOM, put it back on the map.\r\n    if (this.marker) {\r\n      this.setMap(this.map);\r\n    }\r\n  },\r\n\r\n  _updatePosition() {\r\n    if (this.marker && this.latitude != null && this.longitude != null) {\r\n      this.marker.setPosition(new google.maps.LatLng(parseFloat(this.latitude), parseFloat(this.longitude)));\r\n    }\r\n  },\r\n\r\n  _clickEventsChanged() {\r\n    if (this.marker) {\r\n      if (this.clickEvents) {\r\n        this._forwardEvent('click');\r\n        this._forwardEvent('dblclick');\r\n        this._forwardEvent('rightclick');\r\n      } else {\r\n        this._clearListener('click');\r\n        this._clearListener('dblclick');\r\n        this._clearListener('rightclick');\r\n      }\r\n    }\r\n  },\r\n\r\n  _dragEventsChanged() {\r\n    if (this.marker) {\r\n      if (this.dragEvents) {\r\n        this._forwardEvent('drag');\r\n        this._forwardEvent('dragend');\r\n        this._forwardEvent('dragstart');\r\n      } else {\r\n        this._clearListener('drag');\r\n        this._clearListener('dragend');\r\n        this._clearListener('dragstart');\r\n      }\r\n    }\r\n  },\r\n\r\n  _mouseEventsChanged() {\r\n    if (this.marker) {\r\n      if (this.mouseEvents) {\r\n        this._forwardEvent('mousedown');\r\n        this._forwardEvent('mousemove');\r\n        this._forwardEvent('mouseout');\r\n        this._forwardEvent('mouseover');\r\n        this._forwardEvent('mouseup');\r\n      } else {\r\n        this._clearListener('mousedown');\r\n        this._clearListener('mousemove');\r\n        this._clearListener('mouseout');\r\n        this._clearListener('mouseover');\r\n        this._clearListener('mouseup');\r\n      }\r\n    }\r\n  },\r\n\r\n  _animationChanged() {\r\n    if (this.marker) {\r\n      this.marker.setAnimation(google.maps.Animation[this.animation]);\r\n    }\r\n  },\r\n\r\n  _labelChanged() {\r\n    if (this.marker) {\r\n      this.marker.setLabel(this.label);\r\n    }\r\n  },\r\n\r\n  _iconChanged() {\r\n    if (this.marker) {\r\n      this.marker.setIcon(this.icon);\r\n    }\r\n  },\r\n\r\n  _zIndexChanged() {\r\n    if (this.marker) {\r\n      this.marker.setZIndex(this.zIndex);\r\n    }\r\n  },\r\n\r\n  _mapChanged() {\r\n    // Marker will be rebuilt, so disconnect existing one from old map and listeners.\r\n    if (this.marker) {\r\n      this.setMap(null);\r\n      google.maps.event.clearInstanceListeners(this.marker);\r\n    }\r\n\r\n    if (this.map && this.map instanceof google.maps.Map) {\r\n      this._mapReady();\r\n    }\r\n  },\r\n\r\n  _contentChanged() {\r\n    if (this._contentObserver) { this._contentObserver.disconnect(); }\r\n    // Watch for future updates.\r\n    this._contentObserver = new MutationObserver(this._contentChanged.bind(this));\r\n    this._contentObserver.observe(this, {\r\n      childList: true,\r\n      subtree: true,\r\n    });\r\n\r\n    const content = this.innerHTML.trim();\r\n    if (content) {\r\n      if (!this.info) {\r\n        // Create a new infowindow\r\n        this.info = new google.maps.InfoWindow();\r\n        this.openInfoHandler_ = google.maps.event.addListener(this.marker, 'click', () => {\r\n          this.open = true;\r\n        });\r\n\r\n        this.closeInfoHandler_ = google.maps.event.addListener(this.info, 'closeclick', () => {\r\n          this.open = false;\r\n        });\r\n      }\r\n      this.info.setContent(content);\r\n    } else if (this.info) {\r\n      // Destroy the existing infowindow.  It doesn't make sense to have an empty one.\r\n      google.maps.event.removeListener(this.openInfoHandler_);\r\n      google.maps.event.removeListener(this.closeInfoHandler_);\r\n      this.info = null;\r\n    }\r\n  },\r\n\r\n  _openChanged() {\r\n    if (this.info) {\r\n      if (this.open) {\r\n        this.info.open(this.map, this.marker);\r\n        this.fire('google-map-marker-open');\r\n      } else {\r\n        this.info.close();\r\n        this.fire('google-map-marker-close');\r\n      }\r\n    }\r\n  },\r\n\r\n  _mapReady() {\r\n    this._listeners = {};\r\n    this.marker = new google.maps.Marker({\r\n      map: this.map,\r\n      position: {\r\n        lat: parseFloat(this.latitude),\r\n        lng: parseFloat(this.longitude),\r\n      },\r\n      title: this.title,\r\n      animation: google.maps.Animation[this.animation],\r\n      draggable: this.draggable,\r\n      visible: !this.hidden,\r\n      icon: this.icon,\r\n      label: this.label,\r\n      zIndex: this.zIndex,\r\n    });\r\n    this._contentChanged();\r\n    this._clickEventsChanged();\r\n    this._dragEventsChanged();\r\n    this._mouseEventsChanged();\r\n    this._openChanged();\r\n    setupDragHandler_.bind(this)();\r\n  },\r\n\r\n  _clearListener(name) {\r\n    if (this._listeners && this._listeners[name]) {\r\n      google.maps.event.removeListener(this._listeners[name]);\r\n      this._listeners[name] = null;\r\n    }\r\n  },\r\n\r\n  _forwardEvent(name) {\r\n    this._listeners[name] = google.maps.event.addListener(this.marker, name, (event) => {\r\n      this.fire(`google-map-marker-${name}`, event);\r\n    });\r\n  },\r\n\r\n  attributeChanged(attrName) {\r\n    if (!this.marker) {\r\n      return;\r\n    }\r\n\r\n    // Cannot use *Changed watchers for native properties.\r\n    switch (attrName) {\r\n      case 'hidden':\r\n        this.marker.setVisible(!this.hidden);\r\n        break;\r\n      case 'draggable':\r\n        this.marker.setDraggable(this.draggable);\r\n        setupDragHandler_.bind(this)();\r\n        break;\r\n      case 'title':\r\n        this.marker.setTitle(this.title);\r\n        break;\r\n    }\r\n  },\r\n\r\n  /* Override getPosition, setMap, getVisible to allow marker's clustering */\r\n  getPosition() {\r\n    return new google.maps.LatLng(parseFloat(this.latitude), parseFloat(this.longitude));\r\n  },\r\n\r\n  setMap(map) {\r\n    this.marker.setMap(map);\r\n  },\r\n\r\n  getVisible() {\r\n    return this.marker.getVisible();\r\n  },\r\n\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
