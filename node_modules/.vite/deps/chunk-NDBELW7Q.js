import {
  hideElementsGlobally
} from "./chunk-USXUNEBI.js";
import {
  MutableData,
  OptionalMutableData,
  modelForElement,
  templatize
} from "./chunk-EDV4HGN5.js";
import {
  GestureEventListeners,
  LegacyElementMixin
} from "./chunk-GFURQAWV.js";
import {
  PolymerElement
} from "./chunk-6JYS2CNF.js";
import {
  calculateSplices
} from "./chunk-XKB4TURC.js";
import {
  ElementMixin,
  PropertyEffects,
  wrap
} from "./chunk-NCWCJYKY.js";
import {
  strictTemplatePolicy
} from "./chunk-LJKNN44X.js";
import {
  dedupingMixin
} from "./chunk-NCN7ELFS.js";

// node_modules/@polymer/polymer/lib/legacy/templatizer-behavior.js
var Templatizer = {
  templatize(template, mutableData) {
    this._templatizerTemplate = template;
    this.ctor = templatize(template, this, {
      mutableData: Boolean(mutableData),
      parentModel: this._parentModel,
      instanceProps: this._instanceProps,
      forwardHostProp: this._forwardHostPropV2,
      notifyInstanceProp: this._notifyInstancePropV2
    });
  },
  stamp(model) {
    return new this.ctor(model);
  },
  modelForElement(el) {
    return modelForElement(this._templatizerTemplate, el);
  }
};

// node_modules/@polymer/polymer/lib/legacy/mutable-data-behavior.js
var mutablePropertyChange;
(() => {
  mutablePropertyChange = MutableData._mutablePropertyChange;
})();
var OptionalMutableDataBehavior = {
  properties: {
    mutableData: Boolean
  },
  _shouldPropertyChange(property, value, old) {
    return mutablePropertyChange(this, property, value, old, this.mutableData);
  }
};

// node_modules/@polymer/polymer/lib/elements/dom-bind.js
var domBindBase = GestureEventListeners(
  OptionalMutableData(
    PropertyEffects(HTMLElement)
  )
);
var DomBind = class extends domBindBase {
  static get observedAttributes() {
    return ["mutable-data"];
  }
  constructor() {
    super();
    if (strictTemplatePolicy) {
      throw new Error(`strictTemplatePolicy: dom-bind not allowed`);
    }
    this.root = null;
    this.$ = null;
    this.__children = null;
  }
  attributeChangedCallback(name, old, value, namespace) {
    this.mutableData = true;
  }
  connectedCallback() {
    if (!hideElementsGlobally()) {
      this.style.display = "none";
    }
    this.render();
  }
  disconnectedCallback() {
    this.__removeChildren();
  }
  __insertChildren() {
    wrap(wrap(this).parentNode).insertBefore(this.root, this);
  }
  __removeChildren() {
    if (this.__children) {
      for (let i = 0; i < this.__children.length; i++) {
        this.root.appendChild(this.__children[i]);
      }
    }
  }
  render() {
    let template;
    if (!this.__children) {
      template = template || this.querySelector("template");
      if (!template) {
        let observer = new MutationObserver(() => {
          template = this.querySelector("template");
          if (template) {
            observer.disconnect();
            this.render();
          } else {
            throw new Error("dom-bind requires a <template> child");
          }
        });
        observer.observe(this, { childList: true });
        return;
      }
      this.root = this._stampTemplate(
        template
      );
      this.$ = this.root.$;
      this.__children = [];
      for (let n = this.root.firstChild; n; n = n.nextSibling) {
        this.__children[this.__children.length] = n;
      }
      this._enableProperties();
    }
    this.__insertChildren();
    this.dispatchEvent(new CustomEvent("dom-change", {
      bubbles: true,
      composed: true
    }));
  }
};
customElements.define("dom-bind", DomBind);

// node_modules/@polymer/polymer/lib/elements/array-selector.js
var ArraySelectorMixin = dedupingMixin((superClass) => {
  let elementBase = ElementMixin(superClass);
  class ArraySelectorMixin2 extends elementBase {
    static get properties() {
      return {
        items: {
          type: Array
        },
        multi: {
          type: Boolean,
          value: false
        },
        selected: { type: Object, notify: true },
        selectedItem: { type: Object, notify: true },
        toggle: { type: Boolean, value: false }
      };
    }
    static get observers() {
      return ["__updateSelection(multi, items.*)"];
    }
    constructor() {
      super();
      this.__lastItems = null;
      this.__lastMulti = null;
      this.__selectedMap = null;
    }
    __updateSelection(multi, itemsInfo) {
      let path = itemsInfo.path;
      if (path == JSCompiler_renameProperty("items", this)) {
        let newItems = itemsInfo.base || [];
        let lastItems = this.__lastItems;
        let lastMulti = this.__lastMulti;
        if (multi !== lastMulti) {
          this.clearSelection();
        }
        if (lastItems) {
          let splices = calculateSplices(newItems, lastItems);
          this.__applySplices(splices);
        }
        this.__lastItems = newItems;
        this.__lastMulti = multi;
      } else if (itemsInfo.path == `${JSCompiler_renameProperty("items", this)}.splices`) {
        this.__applySplices(itemsInfo.value.indexSplices);
      } else {
        let part = path.slice(`${JSCompiler_renameProperty("items", this)}.`.length);
        let idx = parseInt(part, 10);
        if (part.indexOf(".") < 0 && part == idx) {
          this.__deselectChangedIdx(idx);
        }
      }
    }
    __applySplices(splices) {
      let selected = this.__selectedMap;
      for (let i = 0; i < splices.length; i++) {
        let s = splices[i];
        selected.forEach((idx, item) => {
          if (idx < s.index) {
          } else if (idx >= s.index + s.removed.length) {
            selected.set(item, idx + s.addedCount - s.removed.length);
          } else {
            selected.set(item, -1);
          }
        });
        for (let j = 0; j < s.addedCount; j++) {
          let idx = s.index + j;
          if (selected.has(this.items[idx])) {
            selected.set(this.items[idx], idx);
          }
        }
      }
      this.__updateLinks();
      let sidx = 0;
      selected.forEach((idx, item) => {
        if (idx < 0) {
          if (this.multi) {
            this.splice(JSCompiler_renameProperty("selected", this), sidx, 1);
          } else {
            this.selected = this.selectedItem = null;
          }
          selected.delete(item);
        } else {
          sidx++;
        }
      });
    }
    __updateLinks() {
      this.__dataLinkedPaths = {};
      if (this.multi) {
        let sidx = 0;
        this.__selectedMap.forEach((idx) => {
          if (idx >= 0) {
            this.linkPaths(
              `${JSCompiler_renameProperty("items", this)}.${idx}`,
              `${JSCompiler_renameProperty("selected", this)}.${sidx++}`
            );
          }
        });
      } else {
        this.__selectedMap.forEach((idx) => {
          this.linkPaths(
            JSCompiler_renameProperty("selected", this),
            `${JSCompiler_renameProperty("items", this)}.${idx}`
          );
          this.linkPaths(
            JSCompiler_renameProperty("selectedItem", this),
            `${JSCompiler_renameProperty("items", this)}.${idx}`
          );
        });
      }
    }
    clearSelection() {
      this.__dataLinkedPaths = {};
      this.__selectedMap = /* @__PURE__ */ new Map();
      this.selected = this.multi ? [] : null;
      this.selectedItem = null;
    }
    isSelected(item) {
      return this.__selectedMap.has(item);
    }
    isIndexSelected(idx) {
      return this.isSelected(this.items[idx]);
    }
    __deselectChangedIdx(idx) {
      let sidx = this.__selectedIndexForItemIndex(idx);
      if (sidx >= 0) {
        let i = 0;
        this.__selectedMap.forEach((idx2, item) => {
          if (sidx == i++) {
            this.deselect(item);
          }
        });
      }
    }
    __selectedIndexForItemIndex(idx) {
      let selected = this.__dataLinkedPaths[`${JSCompiler_renameProperty("items", this)}.${idx}`];
      if (selected) {
        return parseInt(selected.slice(`${JSCompiler_renameProperty("selected", this)}.`.length), 10);
      }
    }
    deselect(item) {
      let idx = this.__selectedMap.get(item);
      if (idx >= 0) {
        this.__selectedMap.delete(item);
        let sidx;
        if (this.multi) {
          sidx = this.__selectedIndexForItemIndex(idx);
        }
        this.__updateLinks();
        if (this.multi) {
          this.splice(JSCompiler_renameProperty("selected", this), sidx, 1);
        } else {
          this.selected = this.selectedItem = null;
        }
      }
    }
    deselectIndex(idx) {
      this.deselect(this.items[idx]);
    }
    select(item) {
      this.selectIndex(this.items.indexOf(item));
    }
    selectIndex(idx) {
      let item = this.items[idx];
      if (!this.isSelected(item)) {
        if (!this.multi) {
          this.__selectedMap.clear();
        }
        this.__selectedMap.set(item, idx);
        this.__updateLinks();
        if (this.multi) {
          this.push(JSCompiler_renameProperty("selected", this), item);
        } else {
          this.selected = this.selectedItem = item;
        }
      } else if (this.toggle) {
        this.deselectIndex(idx);
      }
    }
  }
  return ArraySelectorMixin2;
});
var baseArraySelector = ArraySelectorMixin(PolymerElement);
var ArraySelector = class extends baseArraySelector {
  static get is() {
    return "array-selector";
  }
  static get template() {
    return null;
  }
};
customElements.define(ArraySelector.is, ArraySelector);

// node_modules/@polymer/polymer/polymer-legacy.js
var Base = LegacyElementMixin(HTMLElement).prototype;

export {
  Templatizer,
  OptionalMutableDataBehavior,
  Base
};
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
//# sourceMappingURL=chunk-NDBELW7Q.js.map
