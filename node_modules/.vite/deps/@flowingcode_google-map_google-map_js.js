import "./chunk-42S22LWG.js";
import {
  IronResizableBehavior
} from "./chunk-GDRFGSA2.js";
import {
  Base
} from "./chunk-NDBELW7Q.js";
import "./chunk-SNU7EFMM.js";
import "./chunk-DJCARIL3.js";
import "./chunk-6PQS75TG.js";
import "./chunk-USXUNEBI.js";
import "./chunk-EDV4HGN5.js";
import {
  Polymer
} from "./chunk-GFURQAWV.js";
import "./chunk-NKXZ7UFX.js";
import "./chunk-MLNSIFNX.js";
import "./chunk-UNTDB4AH.js";
import "./chunk-JJXNSZ6B.js";
import "./chunk-UMTV3SEQ.js";
import "./chunk-6JYS2CNF.js";
import {
  html
} from "./chunk-W6PN6MOV.js";
import "./chunk-XKB4TURC.js";
import "./chunk-NCWCJYKY.js";
import "./chunk-LJKNN44X.js";
import "./chunk-NCN7ELFS.js";
import "./chunk-CJPRR7ZF.js";
import {
  __commonJS,
  __toESM
} from "./chunk-TWLJ45QX.js";

// node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = __commonJS({
  "node_modules/fast-deep-equal/index.js"(exports, module) {
    "use strict";
    module.exports = function equal2(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal2(a[i], b[i]))
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf)
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString)
          return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
            return false;
        for (i = length; i-- !== 0; ) {
          var key = keys[i];
          if (!equal2(a[key], b[key]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    };
  }
});

// node_modules/@polymer/iron-jsonp-library/iron-jsonp-library.js
var IronJsonpLibraryBehavior = {
  properties: {
    libraryLoaded: {
      type: Boolean,
      value: false,
      notify: true,
      readOnly: true
    },
    libraryErrorMessage: {
      type: String,
      value: null,
      notify: true,
      readOnly: true
    }
  },
  observers: ["_libraryUrlChanged(libraryUrl)"],
  _libraryUrlChanged: function(libraryUrl) {
    if (this._isReady && this.libraryUrl)
      this._loadLibrary();
  },
  _libraryLoadCallback: function(err, result) {
    if (err) {
      Base._warn("Library load failed:", err.message);
      this._setLibraryErrorMessage(err.message);
    } else {
      this._setLibraryErrorMessage(null);
      this._setLibraryLoaded(true);
      if (this.notifyEvent)
        this.fire(this.notifyEvent, result, { composed: true });
    }
  },
  _loadLibrary: function() {
    LoaderMap.require(
      this.libraryUrl,
      this._libraryLoadCallback.bind(this),
      this.callbackName
    );
  },
  ready: function() {
    this._isReady = true;
    if (this.libraryUrl)
      this._loadLibrary();
  }
};
var LoaderMap = {
  apiMap: {},
  require: function(url, notifyCallback, jsonpCallbackName) {
    var name = this.nameFromUrl(url);
    if (!this.apiMap[name])
      this.apiMap[name] = new Loader(name, url, jsonpCallbackName);
    this.apiMap[name].requestNotify(notifyCallback);
  },
  nameFromUrl: function(url) {
    return url.replace(/[\:\/\%\?\&\.\=\-\,]/g, "_") + "_api";
  }
};
var Loader = function(name, url, callbackName) {
  this.notifiers = [];
  if (!callbackName) {
    if (url.indexOf(this.callbackMacro) >= 0) {
      callbackName = name + "_loaded";
      url = url.replace(this.callbackMacro, callbackName);
    } else {
      this.error = new Error(
        "IronJsonpLibraryBehavior a %%callback%% parameter is required in libraryUrl"
      );
      return;
    }
  }
  this.callbackName = callbackName;
  window[this.callbackName] = this.success.bind(this);
  this.addScript(url);
};
Loader.prototype = {
  callbackMacro: "%%callback%%",
  loaded: false,
  addScript: function(src) {
    var script = document.createElement("script");
    script.src = src;
    script.onerror = this.handleError.bind(this);
    var s = document.querySelector("script") || document.body;
    s.parentNode.insertBefore(script, s);
    this.script = script;
  },
  removeScript: function() {
    if (this.script.parentNode) {
      this.script.parentNode.removeChild(this.script);
    }
    this.script = null;
  },
  handleError: function(ev) {
    this.error = new Error("Library failed to load");
    this.notifyAll();
    this.cleanup();
  },
  success: function() {
    this.loaded = true;
    this.result = Array.prototype.slice.call(arguments);
    this.notifyAll();
    this.cleanup();
  },
  cleanup: function() {
    delete window[this.callbackName];
  },
  notifyAll: function() {
    this.notifiers.forEach(function(notifyCallback) {
      notifyCallback(this.error, this.result);
    }.bind(this));
    this.notifiers = [];
  },
  requestNotify: function(notifyCallback) {
    if (this.loaded || this.error) {
      notifyCallback(this.error, this.result);
    } else {
      this.notifiers.push(notifyCallback);
    }
  }
};
Polymer({
  is: "iron-jsonp-library",
  behaviors: [IronJsonpLibraryBehavior],
  properties: {
    libraryUrl: String,
    callbackName: String,
    notifyEvent: String
  }
});

// node_modules/@johnriv/google-apis/google-maps-api.js
Polymer({
  is: "google-maps-api",
  behaviors: [
    IronJsonpLibraryBehavior
  ],
  properties: {
    mapsUrl: {
      type: String,
      value: "https://maps.googleapis.com/maps/api/js?callback=%%callback%%"
    },
    apiKey: {
      type: String,
      value: ""
    },
    clientId: {
      type: String,
      value: ""
    },
    version: {
      type: String,
      value: "3.exp"
    },
    language: {
      type: String,
      value: ""
    },
    signedIn: {
      type: Boolean,
      value: false
    },
    notifyEvent: {
      type: String,
      value: "api-load"
    },
    libraryUrl: {
      type: String,
      computed: "_computeUrl(mapsUrl, version, apiKey, clientId, language, signedIn)"
    }
  },
  _computeUrl(mapsUrl, version, apiKey, clientId, language, signedIn) {
    let url = `${mapsUrl}&v=${version}`;
    url += "&libraries=drawing,geometry,places,visualization";
    if (apiKey && !clientId) {
      url += `&key=${apiKey}`;
    }
    if (clientId) {
      url += `&client=${clientId}`;
    }
    if (!apiKey && !clientId) {
      const warning = "No Google Maps API Key or Client ID specified. See https://developers.google.com/maps/documentation/javascript/get-api-key for instructions to get started with a key or client id.";
      console.warn(warning);
    }
    if (language) {
      url += `&language=${language}`;
    }
    if (signedIn) {
      url += `&signed_in=${signedIn}`;
    }
    return url;
  },
  get api() {
    return google.maps;
  }
});

// node_modules/kdbush/src/sort.js
function sortKD(ids, coords, nodeSize, left, right, depth) {
  if (right - left <= nodeSize)
    return;
  const m = left + right >> 1;
  select(ids, coords, m, left, right, depth % 2);
  sortKD(ids, coords, nodeSize, left, m - 1, depth + 1);
  sortKD(ids, coords, nodeSize, m + 1, right, depth + 1);
}
function select(ids, coords, k, left, right, inc) {
  while (right > left) {
    if (right - left > 600) {
      const n = right - left + 1;
      const m = k - left + 1;
      const z = Math.log(n);
      const s = 0.5 * Math.exp(2 * z / 3);
      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
      select(ids, coords, k, newLeft, newRight, inc);
    }
    const t = coords[2 * k + inc];
    let i = left;
    let j = right;
    swapItem(ids, coords, left, k);
    if (coords[2 * right + inc] > t)
      swapItem(ids, coords, left, right);
    while (i < j) {
      swapItem(ids, coords, i, j);
      i++;
      j--;
      while (coords[2 * i + inc] < t)
        i++;
      while (coords[2 * j + inc] > t)
        j--;
    }
    if (coords[2 * left + inc] === t)
      swapItem(ids, coords, left, j);
    else {
      j++;
      swapItem(ids, coords, j, right);
    }
    if (j <= k)
      left = j + 1;
    if (k <= j)
      right = j - 1;
  }
}
function swapItem(ids, coords, i, j) {
  swap(ids, i, j);
  swap(coords, 2 * i, 2 * j);
  swap(coords, 2 * i + 1, 2 * j + 1);
}
function swap(arr, i, j) {
  const tmp = arr[i];
  arr[i] = arr[j];
  arr[j] = tmp;
}

// node_modules/kdbush/src/range.js
function range(ids, coords, minX, minY, maxX, maxY, nodeSize) {
  const stack = [0, ids.length - 1, 0];
  const result = [];
  let x, y;
  while (stack.length) {
    const axis = stack.pop();
    const right = stack.pop();
    const left = stack.pop();
    if (right - left <= nodeSize) {
      for (let i = left; i <= right; i++) {
        x = coords[2 * i];
        y = coords[2 * i + 1];
        if (x >= minX && x <= maxX && y >= minY && y <= maxY)
          result.push(ids[i]);
      }
      continue;
    }
    const m = Math.floor((left + right) / 2);
    x = coords[2 * m];
    y = coords[2 * m + 1];
    if (x >= minX && x <= maxX && y >= minY && y <= maxY)
      result.push(ids[m]);
    const nextAxis = (axis + 1) % 2;
    if (axis === 0 ? minX <= x : minY <= y) {
      stack.push(left);
      stack.push(m - 1);
      stack.push(nextAxis);
    }
    if (axis === 0 ? maxX >= x : maxY >= y) {
      stack.push(m + 1);
      stack.push(right);
      stack.push(nextAxis);
    }
  }
  return result;
}

// node_modules/kdbush/src/within.js
function within(ids, coords, qx, qy, r, nodeSize) {
  const stack = [0, ids.length - 1, 0];
  const result = [];
  const r2 = r * r;
  while (stack.length) {
    const axis = stack.pop();
    const right = stack.pop();
    const left = stack.pop();
    if (right - left <= nodeSize) {
      for (let i = left; i <= right; i++) {
        if (sqDist(coords[2 * i], coords[2 * i + 1], qx, qy) <= r2)
          result.push(ids[i]);
      }
      continue;
    }
    const m = Math.floor((left + right) / 2);
    const x = coords[2 * m];
    const y = coords[2 * m + 1];
    if (sqDist(x, y, qx, qy) <= r2)
      result.push(ids[m]);
    const nextAxis = (axis + 1) % 2;
    if (axis === 0 ? qx - r <= x : qy - r <= y) {
      stack.push(left);
      stack.push(m - 1);
      stack.push(nextAxis);
    }
    if (axis === 0 ? qx + r >= x : qy + r >= y) {
      stack.push(m + 1);
      stack.push(right);
      stack.push(nextAxis);
    }
  }
  return result;
}
function sqDist(ax, ay, bx, by) {
  const dx = ax - bx;
  const dy = ay - by;
  return dx * dx + dy * dy;
}

// node_modules/kdbush/src/index.js
var defaultGetX = (p) => p[0];
var defaultGetY = (p) => p[1];
var KDBush = class {
  constructor(points, getX2 = defaultGetX, getY2 = defaultGetY, nodeSize = 64, ArrayType = Float64Array) {
    this.nodeSize = nodeSize;
    this.points = points;
    const IndexArrayType = points.length < 65536 ? Uint16Array : Uint32Array;
    const ids = this.ids = new IndexArrayType(points.length);
    const coords = this.coords = new ArrayType(points.length * 2);
    for (let i = 0; i < points.length; i++) {
      ids[i] = i;
      coords[2 * i] = getX2(points[i]);
      coords[2 * i + 1] = getY2(points[i]);
    }
    sortKD(ids, coords, nodeSize, 0, ids.length - 1, 0);
  }
  range(minX, minY, maxX, maxY) {
    return range(this.ids, this.coords, minX, minY, maxX, maxY, this.nodeSize);
  }
  within(x, y, r) {
    return within(this.ids, this.coords, x, y, r, this.nodeSize);
  }
};

// node_modules/supercluster/index.js
var defaultOptions = {
  minZoom: 0,
  maxZoom: 16,
  minPoints: 2,
  radius: 40,
  extent: 512,
  nodeSize: 64,
  log: false,
  generateId: false,
  reduce: null,
  map: (props) => props
};
var fround = Math.fround || ((tmp) => (x) => {
  tmp[0] = +x;
  return tmp[0];
})(new Float32Array(1));
var Supercluster = class {
  constructor(options) {
    this.options = extend(Object.create(defaultOptions), options);
    this.trees = new Array(this.options.maxZoom + 1);
  }
  load(points) {
    const { log, minZoom, maxZoom, nodeSize } = this.options;
    if (log)
      console.time("total time");
    const timerId = `prepare ${points.length} points`;
    if (log)
      console.time(timerId);
    this.points = points;
    let clusters = [];
    for (let i = 0; i < points.length; i++) {
      if (!points[i].geometry)
        continue;
      clusters.push(createPointCluster(points[i], i));
    }
    this.trees[maxZoom + 1] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);
    if (log)
      console.timeEnd(timerId);
    for (let z = maxZoom; z >= minZoom; z--) {
      const now = +Date.now();
      clusters = this._cluster(clusters, z);
      this.trees[z] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);
      if (log)
        console.log("z%d: %d clusters in %dms", z, clusters.length, +Date.now() - now);
    }
    if (log)
      console.timeEnd("total time");
    return this;
  }
  getClusters(bbox, zoom) {
    let minLng = ((bbox[0] + 180) % 360 + 360) % 360 - 180;
    const minLat = Math.max(-90, Math.min(90, bbox[1]));
    let maxLng = bbox[2] === 180 ? 180 : ((bbox[2] + 180) % 360 + 360) % 360 - 180;
    const maxLat = Math.max(-90, Math.min(90, bbox[3]));
    if (bbox[2] - bbox[0] >= 360) {
      minLng = -180;
      maxLng = 180;
    } else if (minLng > maxLng) {
      const easternHem = this.getClusters([minLng, minLat, 180, maxLat], zoom);
      const westernHem = this.getClusters([-180, minLat, maxLng, maxLat], zoom);
      return easternHem.concat(westernHem);
    }
    const tree = this.trees[this._limitZoom(zoom)];
    const ids = tree.range(lngX(minLng), latY(maxLat), lngX(maxLng), latY(minLat));
    const clusters = [];
    for (const id of ids) {
      const c = tree.points[id];
      clusters.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);
    }
    return clusters;
  }
  getChildren(clusterId) {
    const originId = this._getOriginId(clusterId);
    const originZoom = this._getOriginZoom(clusterId);
    const errorMsg = "No cluster with the specified id.";
    const index = this.trees[originZoom];
    if (!index)
      throw new Error(errorMsg);
    const origin = index.points[originId];
    if (!origin)
      throw new Error(errorMsg);
    const r = this.options.radius / (this.options.extent * Math.pow(2, originZoom - 1));
    const ids = index.within(origin.x, origin.y, r);
    const children = [];
    for (const id of ids) {
      const c = index.points[id];
      if (c.parentId === clusterId) {
        children.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);
      }
    }
    if (children.length === 0)
      throw new Error(errorMsg);
    return children;
  }
  getLeaves(clusterId, limit, offset) {
    limit = limit || 10;
    offset = offset || 0;
    const leaves = [];
    this._appendLeaves(leaves, clusterId, limit, offset, 0);
    return leaves;
  }
  getTile(z, x, y) {
    const tree = this.trees[this._limitZoom(z)];
    const z2 = Math.pow(2, z);
    const { extent, radius } = this.options;
    const p = radius / extent;
    const top = (y - p) / z2;
    const bottom = (y + 1 + p) / z2;
    const tile = {
      features: []
    };
    this._addTileFeatures(
      tree.range((x - p) / z2, top, (x + 1 + p) / z2, bottom),
      tree.points,
      x,
      y,
      z2,
      tile
    );
    if (x === 0) {
      this._addTileFeatures(
        tree.range(1 - p / z2, top, 1, bottom),
        tree.points,
        z2,
        y,
        z2,
        tile
      );
    }
    if (x === z2 - 1) {
      this._addTileFeatures(
        tree.range(0, top, p / z2, bottom),
        tree.points,
        -1,
        y,
        z2,
        tile
      );
    }
    return tile.features.length ? tile : null;
  }
  getClusterExpansionZoom(clusterId) {
    let expansionZoom = this._getOriginZoom(clusterId) - 1;
    while (expansionZoom <= this.options.maxZoom) {
      const children = this.getChildren(clusterId);
      expansionZoom++;
      if (children.length !== 1)
        break;
      clusterId = children[0].properties.cluster_id;
    }
    return expansionZoom;
  }
  _appendLeaves(result, clusterId, limit, offset, skipped) {
    const children = this.getChildren(clusterId);
    for (const child of children) {
      const props = child.properties;
      if (props && props.cluster) {
        if (skipped + props.point_count <= offset) {
          skipped += props.point_count;
        } else {
          skipped = this._appendLeaves(result, props.cluster_id, limit, offset, skipped);
        }
      } else if (skipped < offset) {
        skipped++;
      } else {
        result.push(child);
      }
      if (result.length === limit)
        break;
    }
    return skipped;
  }
  _addTileFeatures(ids, points, x, y, z2, tile) {
    for (const i of ids) {
      const c = points[i];
      const isCluster = c.numPoints;
      let tags, px, py;
      if (isCluster) {
        tags = getClusterProperties(c);
        px = c.x;
        py = c.y;
      } else {
        const p = this.points[c.index];
        tags = p.properties;
        px = lngX(p.geometry.coordinates[0]);
        py = latY(p.geometry.coordinates[1]);
      }
      const f = {
        type: 1,
        geometry: [[
          Math.round(this.options.extent * (px * z2 - x)),
          Math.round(this.options.extent * (py * z2 - y))
        ]],
        tags
      };
      let id;
      if (isCluster) {
        id = c.id;
      } else if (this.options.generateId) {
        id = c.index;
      } else if (this.points[c.index].id) {
        id = this.points[c.index].id;
      }
      if (id !== void 0)
        f.id = id;
      tile.features.push(f);
    }
  }
  _limitZoom(z) {
    return Math.max(this.options.minZoom, Math.min(Math.floor(+z), this.options.maxZoom + 1));
  }
  _cluster(points, zoom) {
    const clusters = [];
    const { radius, extent, reduce, minPoints } = this.options;
    const r = radius / (extent * Math.pow(2, zoom));
    for (let i = 0; i < points.length; i++) {
      const p = points[i];
      if (p.zoom <= zoom)
        continue;
      p.zoom = zoom;
      const tree = this.trees[zoom + 1];
      const neighborIds = tree.within(p.x, p.y, r);
      const numPointsOrigin = p.numPoints || 1;
      let numPoints = numPointsOrigin;
      for (const neighborId of neighborIds) {
        const b = tree.points[neighborId];
        if (b.zoom > zoom)
          numPoints += b.numPoints || 1;
      }
      if (numPoints > numPointsOrigin && numPoints >= minPoints) {
        let wx = p.x * numPointsOrigin;
        let wy = p.y * numPointsOrigin;
        let clusterProperties = reduce && numPointsOrigin > 1 ? this._map(p, true) : null;
        const id = (i << 5) + (zoom + 1) + this.points.length;
        for (const neighborId of neighborIds) {
          const b = tree.points[neighborId];
          if (b.zoom <= zoom)
            continue;
          b.zoom = zoom;
          const numPoints2 = b.numPoints || 1;
          wx += b.x * numPoints2;
          wy += b.y * numPoints2;
          b.parentId = id;
          if (reduce) {
            if (!clusterProperties)
              clusterProperties = this._map(p, true);
            reduce(clusterProperties, this._map(b));
          }
        }
        p.parentId = id;
        clusters.push(createCluster(wx / numPoints, wy / numPoints, id, numPoints, clusterProperties));
      } else {
        clusters.push(p);
        if (numPoints > 1) {
          for (const neighborId of neighborIds) {
            const b = tree.points[neighborId];
            if (b.zoom <= zoom)
              continue;
            b.zoom = zoom;
            clusters.push(b);
          }
        }
      }
    }
    return clusters;
  }
  _getOriginId(clusterId) {
    return clusterId - this.points.length >> 5;
  }
  _getOriginZoom(clusterId) {
    return (clusterId - this.points.length) % 32;
  }
  _map(point, clone) {
    if (point.numPoints) {
      return clone ? extend({}, point.properties) : point.properties;
    }
    const original = this.points[point.index].properties;
    const result = this.options.map(original);
    return clone && result === original ? extend({}, result) : result;
  }
};
function createCluster(x, y, id, numPoints, properties) {
  return {
    x: fround(x),
    y: fround(y),
    zoom: Infinity,
    id,
    parentId: -1,
    numPoints,
    properties
  };
}
function createPointCluster(p, id) {
  const [x, y] = p.geometry.coordinates;
  return {
    x: fround(lngX(x)),
    y: fround(latY(y)),
    zoom: Infinity,
    index: id,
    parentId: -1
  };
}
function getClusterJSON(cluster) {
  return {
    type: "Feature",
    id: cluster.id,
    properties: getClusterProperties(cluster),
    geometry: {
      type: "Point",
      coordinates: [xLng(cluster.x), yLat(cluster.y)]
    }
  };
}
function getClusterProperties(cluster) {
  const count = cluster.numPoints;
  const abbrev = count >= 1e4 ? `${Math.round(count / 1e3)}k` : count >= 1e3 ? `${Math.round(count / 100) / 10}k` : count;
  return extend(extend({}, cluster.properties), {
    cluster: true,
    cluster_id: cluster.id,
    point_count: count,
    point_count_abbreviated: abbrev
  });
}
function lngX(lng) {
  return lng / 360 + 0.5;
}
function latY(lat) {
  const sin = Math.sin(lat * Math.PI / 180);
  const y = 0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI;
  return y < 0 ? 0 : y > 1 ? 1 : y;
}
function xLng(x) {
  return (x - 0.5) * 360;
}
function yLat(y) {
  const y2 = (180 - y * 360) * Math.PI / 180;
  return 360 * Math.atan(Math.exp(y2)) / Math.PI - 90;
}
function extend(dest, src) {
  for (const id in src)
    dest[id] = src[id];
  return dest;
}
function getX(p) {
  return p.x;
}
function getY(p) {
  return p.y;
}

// node_modules/@googlemaps/markerclusterer/dist/index.esm.js
var import_fast_deep_equal = __toESM(require_fast_deep_equal());
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
var Cluster = class {
  constructor({ markers, position }) {
    this.markers = markers;
    if (position) {
      if (position instanceof google.maps.LatLng) {
        this._position = position;
      } else {
        this._position = new google.maps.LatLng(position);
      }
    }
  }
  get bounds() {
    if (this.markers.length === 0 && !this._position) {
      return void 0;
    }
    return this.markers.reduce((bounds, marker) => {
      return bounds.extend(marker.getPosition());
    }, new google.maps.LatLngBounds(this._position, this._position));
  }
  get position() {
    return this._position || this.bounds.getCenter();
  }
  get count() {
    return this.markers.filter((m) => m.getVisible()).length;
  }
  push(marker) {
    this.markers.push(marker);
  }
  delete() {
    if (this.marker) {
      this.marker.setMap(null);
      delete this.marker;
    }
    this.markers.length = 0;
  }
};
var AbstractAlgorithm = class {
  constructor({ maxZoom = 16 }) {
    this.maxZoom = maxZoom;
  }
  noop({ markers }) {
    return noop(markers);
  }
};
var noop = (markers) => {
  const clusters = markers.map((marker) => new Cluster({
    position: marker.getPosition(),
    markers: [marker]
  }));
  return clusters;
};
var SuperClusterAlgorithm = class extends AbstractAlgorithm {
  constructor(_a) {
    var { maxZoom, radius = 60 } = _a, options = __rest(_a, ["maxZoom", "radius"]);
    super({ maxZoom });
    this.superCluster = new Supercluster(Object.assign({ maxZoom: this.maxZoom, radius }, options));
    this.state = { zoom: null };
  }
  calculate(input) {
    let changed = false;
    if (!(0, import_fast_deep_equal.default)(input.markers, this.markers)) {
      changed = true;
      this.markers = [...input.markers];
      const points = this.markers.map((marker) => {
        return {
          type: "Feature",
          geometry: {
            type: "Point",
            coordinates: [
              marker.getPosition().lng(),
              marker.getPosition().lat()
            ]
          },
          properties: { marker }
        };
      });
      this.superCluster.load(points);
    }
    const state = { zoom: input.map.getZoom() };
    if (!changed) {
      if (this.state.zoom > this.maxZoom && state.zoom > this.maxZoom)
        ;
      else {
        changed = changed || !(0, import_fast_deep_equal.default)(this.state, state);
      }
    }
    this.state = state;
    if (changed) {
      this.clusters = this.cluster(input);
    }
    return { clusters: this.clusters, changed };
  }
  cluster({ map }) {
    return this.superCluster.getClusters([-180, -90, 180, 90], Math.round(map.getZoom())).map(this.transformCluster.bind(this));
  }
  transformCluster({ geometry: { coordinates: [lng, lat] }, properties }) {
    if (properties.cluster) {
      return new Cluster({
        markers: this.superCluster.getLeaves(properties.cluster_id, Infinity).map((leaf) => leaf.properties.marker),
        position: new google.maps.LatLng({ lat, lng })
      });
    } else {
      const marker = properties.marker;
      return new Cluster({
        markers: [marker],
        position: marker.getPosition()
      });
    }
  }
};
var ClusterStats = class {
  constructor(markers, clusters) {
    this.markers = { sum: markers.length };
    const clusterMarkerCounts = clusters.map((a) => a.count);
    const clusterMarkerSum = clusterMarkerCounts.reduce((a, b) => a + b, 0);
    this.clusters = {
      count: clusters.length,
      markers: {
        mean: clusterMarkerSum / clusters.length,
        sum: clusterMarkerSum,
        min: Math.min(...clusterMarkerCounts),
        max: Math.max(...clusterMarkerCounts)
      }
    };
  }
};
var DefaultRenderer = class {
  render({ count, position }, stats) {
    const color = count > Math.max(10, stats.clusters.markers.mean) ? "#ff0000" : "#0000ff";
    const svg = window.btoa(`
  <svg fill="${color}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 240 240">
    <circle cx="120" cy="120" opacity=".6" r="70" />
    <circle cx="120" cy="120" opacity=".3" r="90" />
    <circle cx="120" cy="120" opacity=".2" r="110" />
  </svg>`);
    return new google.maps.Marker({
      position,
      icon: {
        url: `data:image/svg+xml;base64,${svg}`,
        scaledSize: new google.maps.Size(45, 45)
      },
      label: {
        text: String(count),
        color: "rgba(255,255,255,0.9)",
        fontSize: "12px"
      },
      title: `Cluster of ${count} markers`,
      zIndex: Number(google.maps.Marker.MAX_ZINDEX) + count
    });
  }
};
function extend2(type1, type2) {
  for (let property in type2.prototype) {
    type1.prototype[property] = type2.prototype[property];
  }
}
var OverlayViewSafe = class {
  constructor() {
    extend2(OverlayViewSafe, google.maps.OverlayView);
  }
};
var MarkerClustererEvents;
(function(MarkerClustererEvents2) {
  MarkerClustererEvents2["CLUSTERING_BEGIN"] = "clusteringbegin";
  MarkerClustererEvents2["CLUSTERING_END"] = "clusteringend";
  MarkerClustererEvents2["CLUSTER_CLICK"] = "click";
})(MarkerClustererEvents || (MarkerClustererEvents = {}));
var defaultOnClusterClickHandler = (_, cluster, map) => {
  map.fitBounds(cluster.bounds);
};
var MarkerClusterer = class extends OverlayViewSafe {
  constructor({ map, markers = [], algorithm = new SuperClusterAlgorithm({}), renderer = new DefaultRenderer(), onClusterClick = defaultOnClusterClickHandler }) {
    super();
    this.markers = [...markers];
    this.clusters = [];
    this.algorithm = algorithm;
    this.renderer = renderer;
    this.onClusterClick = onClusterClick;
    if (map) {
      this.setMap(map);
    }
  }
  addMarker(marker, noDraw) {
    if (this.markers.includes(marker)) {
      return;
    }
    this.markers.push(marker);
    if (!noDraw) {
      this.render();
    }
  }
  addMarkers(markers, noDraw) {
    markers.forEach((marker) => {
      this.addMarker(marker, true);
    });
    if (!noDraw) {
      this.render();
    }
  }
  removeMarker(marker, noDraw) {
    const index = this.markers.indexOf(marker);
    if (index === -1) {
      return false;
    }
    marker.setMap(null);
    this.markers.splice(index, 1);
    if (!noDraw) {
      this.render();
    }
    return true;
  }
  removeMarkers(markers, noDraw) {
    let removed = false;
    markers.forEach((marker) => {
      removed = this.removeMarker(marker, true) || removed;
    });
    if (removed && !noDraw) {
      this.render();
    }
    return removed;
  }
  clearMarkers(noDraw) {
    this.markers.length = 0;
    if (!noDraw) {
      this.render();
    }
  }
  render() {
    const map = this.getMap();
    if (map instanceof google.maps.Map && this.getProjection()) {
      google.maps.event.trigger(this, MarkerClustererEvents.CLUSTERING_BEGIN, this);
      const { clusters, changed } = this.algorithm.calculate({
        markers: this.markers,
        map,
        mapCanvasProjection: this.getProjection()
      });
      if (changed || changed == void 0) {
        this.reset();
        this.clusters = clusters;
        this.renderClusters();
      }
      google.maps.event.trigger(this, MarkerClustererEvents.CLUSTERING_END, this);
    }
  }
  onAdd() {
    this.idleListener = this.getMap().addListener("idle", this.render.bind(this));
    this.render();
  }
  onRemove() {
    google.maps.event.removeListener(this.idleListener);
    this.reset();
  }
  reset() {
    this.markers.forEach((marker) => marker.setMap(null));
    this.clusters.forEach((cluster) => cluster.delete());
    this.clusters = [];
  }
  renderClusters() {
    const stats = new ClusterStats(this.markers, this.clusters);
    const map = this.getMap();
    this.clusters.forEach((cluster) => {
      if (cluster.markers.length === 1) {
        cluster.marker = cluster.markers[0];
      } else {
        cluster.marker = this.renderer.render(cluster, stats);
        if (this.onClusterClick) {
          cluster.marker.addListener(
            "click",
            (event) => {
              google.maps.event.trigger(this, MarkerClustererEvents.CLUSTER_CLICK, cluster);
              this.onClusterClick(event, cluster, map);
            }
          );
        }
      }
      cluster.marker.setMap(map);
    });
  }
};

// node_modules/@flowingcode/google-map/google-map.js
Polymer({
  _template: html`
    <style>
      :host {
        position: relative;
        display: block;
        height: 100%;
      }

      #map {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
      }

      #map div[role="dialog"] button[class="gm-ui-hover-effect"] span {
        background-color: #000;
      }
    </style>

    <google-maps-api id="api" api-key="[[apiKey]]" client-id="[[clientId]]" version="[[version]]" signed-in="[[signedIn]]" language="[[language]]" on-api-load="_mapApiLoaded" maps-url="[[mapsUrl]]">
    </google-maps-api>

    <div id="map"></div>

    <iron-selector id="selector" multi="[[!singleInfoWindow]]" selected-attribute="open" activate-event="google-map-marker-open" on-google-map-marker-close="_deselectMarker">
      <slot id="markers" name="markers"></slot>
    </iron-selector>

    <slot id="objects"></slot>
`,
  is: "google-map",
  properties: {
    apiKey: String,
    mapsUrl: {
      type: String
    },
    clientId: String,
    latitude: {
      type: Number,
      value: 37.77493,
      notify: true,
      reflectToAttribute: true
    },
    map: {
      type: Object,
      notify: true,
      value: null
    },
    longitude: {
      type: Number,
      value: -122.41942,
      notify: true,
      reflectToAttribute: true
    },
    kml: {
      type: String,
      value: null,
      observer: "_loadKml"
    },
    zoom: {
      type: Number,
      value: 10,
      observer: "_zoomChanged",
      notify: true
    },
    noAutoTilt: {
      type: Boolean,
      value: false
    },
    mapType: {
      type: String,
      value: "roadmap",
      observer: "_mapTypeChanged",
      notify: true
    },
    version: {
      type: String,
      value: "3.exp"
    },
    disableDefaultUi: {
      type: Boolean,
      value: false,
      observer: "_disableDefaultUiChanged"
    },
    disableMapTypeControl: {
      type: Boolean,
      value: false,
      observer: "_disableMapTypeControlChanged"
    },
    disableStreetViewControl: {
      type: Boolean,
      value: false,
      observer: "_disableStreetViewControlChanged"
    },
    disableRotateControl: {
      type: Boolean,
      value: false,
      observer: "_disableRotateControlChanged"
    },
    disableFullScreenControl: {
      type: Boolean,
      value: false,
      observer: "_disableFullScreenControlChanged"
    },
    disableZoomControl: {
      type: Boolean,
      value: false,
      observer: "_disableZoomControlChanged"
    },
    disableScaleControl: {
      type: Boolean,
      value: false,
      observer: "_disableScaleControlChanged"
    },
    fitToMarkers: {
      type: Boolean,
      value: false,
      observer: "_fitToMarkersChanged"
    },
    disableZoom: {
      type: Boolean,
      value: false,
      observer: "_disableZoomChanged"
    },
    styles: {
      type: Object,
      value() {
        return {};
      }
    },
    maxZoom: {
      type: Number,
      observer: "_maxZoomChanged"
    },
    minZoom: {
      type: Number,
      observer: "_minZoomChanged"
    },
    signedIn: {
      type: Boolean,
      value: false
    },
    language: {
      type: String
    },
    clickEvents: {
      type: Boolean,
      value: false,
      observer: "_clickEventsChanged"
    },
    dragEvents: {
      type: Boolean,
      value: false,
      observer: "_dragEventsChanged"
    },
    mouseEvents: {
      type: Boolean,
      value: false,
      observer: "_mouseEventsChanged"
    },
    additionalMapOptions: {
      type: Object,
      value() {
        return {};
      }
    },
    markers: {
      type: Array,
      value() {
        return [];
      },
      readOnly: true
    },
    objects: {
      type: Array,
      value() {
        return [];
      },
      readOnly: true
    },
    singleInfoWindow: {
      type: Boolean,
      value: false
    },
    mapId: {
      type: String
    },
    controlSize: {
      type: Number
    },
    enableMarkersClustering: {
      type: Boolean,
      value: false
    },
    markerCluster: {
      type: Object,
      value: null
    }
  },
  listeners: {
    "iron-resize": "resize"
  },
  observers: [
    "_debounceUpdateCenter(latitude, longitude)"
  ],
  attached() {
    this._initGMap();
  },
  detached() {
    if (this._markersChildrenListener) {
      this.unlisten(this.$.selector, "items-changed", "_updateMarkers");
      this._markersChildrenListener = null;
    }
    if (this._objectsMutationObserver) {
      this._objectsMutationObserver.disconnect();
      this._objectsMutationObserver = null;
    }
  },
  behaviors: [
    IronResizableBehavior
  ],
  _initGMap() {
    if (this.map) {
      return;
    }
    if (this.$.api.libraryLoaded !== true) {
      return;
    }
    if (!this.isAttached) {
      return;
    }
    this.map = new google.maps.Map(this.$.map, this._getMapOptions());
    this._listeners = {};
    this._updateCenter();
    this._loadKml();
    this._updateMarkers();
    this._loadMarkersCluster();
    this._updateObjects();
    this._addMapListeners();
    this.fire("google-map-ready");
  },
  _mapApiLoaded() {
    this._initGMap();
  },
  _getMapOptions() {
    const mapOptions = {
      zoom: this.zoom,
      tilt: this.noAutoTilt ? 0 : 45,
      mapTypeId: this.mapType,
      disableDefaultUI: this.disableDefaultUi,
      mapTypeControl: !this.disableDefaultUi && !this.disableMapTypeControl,
      streetViewControl: !this.disableDefaultUi && !this.disableStreetViewControl,
      rotateControl: !this.disableDefaultUi && !this.disableRotateControl,
      fullscreenControl: !this.disableDefaultUi && !this.disableFullScreenControl,
      zoomControl: !this.disableDefaultUi && !this.disableZoomControl,
      scaleControl: !this.disableDefaultUi && !this.disableScaleControl,
      disableDoubleClickZoom: this.disableZoom,
      scrollwheel: !this.disableZoom,
      styles: this.styles,
      maxZoom: Number(this.maxZoom),
      minZoom: Number(this.minZoom),
      mapId: this.mapId,
      controlSize: this.controlSize,
      enableMarkersClustering: this.enableMarkersClustering
    };
    if (this.getAttribute("draggable") != null) {
      mapOptions.draggable = this.draggable;
    }
    for (const p in this.additionalMapOptions) {
      mapOptions[p] = this.additionalMapOptions[p];
    }
    return mapOptions;
  },
  _attachChildrenToMap(children) {
    if (this.map) {
      for (var i = 0, child; child = children[i]; ++i) {
        child.map = this.map;
      }
    }
  },
  _observeMarkers() {
    if (this._markersChildrenListener) {
      return;
    }
    this._markersChildrenListener = this.listen(this.$.selector, "items-changed", "_updateMarkers");
  },
  _updateMarkers() {
    if (this.map) {
      const newMarkers = Array.prototype.slice.call(this.$.markers.assignedNodes({ flatten: true }));
      if (newMarkers.length === this.markers.length) {
        const added = newMarkers.filter((m) => this.markers && this.markers.indexOf(m) === -1);
        if (added.length === 0) {
          if (!this._markersChildrenListener) {
            this._observeMarkers();
          }
          return;
        }
      }
      this._observeMarkers();
      this.markers = this._setMarkers(newMarkers);
      this._attachChildrenToMap(this.markers);
      if (this.fitToMarkers) {
        this._fitToMarkersChanged();
      }
    }
  },
  _observeObjects() {
    if (this._objectsMutationObserver) {
      return;
    }
    this._objectsMutationObserver = new MutationObserver(this._updateObjects.bind(this));
    this._objectsMutationObserver.observe(this, {
      childList: true
    });
  },
  _updateObjects() {
    const newObjects = Array.prototype.slice.call(this.$.objects.assignedNodes({ flatten: true }));
    if (newObjects.length === this.objects.length) {
      const added = newObjects.filter((o) => this.objects.indexOf(o) === -1);
      if (added.length === 0) {
        this._observeObjects();
        return;
      }
    }
    this._observeObjects();
    this._setObjects(newObjects);
    this._attachChildrenToMap(this.objects);
  },
  clear() {
    for (var i = 0, m; m = this.markers[i]; ++i) {
      m.marker.setMap(null);
    }
  },
  resize() {
    if (this.map) {
      const oldLatitude = this.latitude;
      const oldLongitude = this.longitude;
      google.maps.event.trigger(this.map, "resize");
      this.latitude = oldLatitude;
      this.longitude = oldLongitude;
      if (this.fitToMarkers) {
        this._fitToMarkersChanged();
      }
    }
  },
  _loadKml() {
    if (this.map && this.kml) {
      const kmlfile = new google.maps.KmlLayer({
        url: this.kml,
        map: this.map
      });
    }
  },
  _debounceUpdateCenter() {
    this.debounce("updateCenter", this._updateCenter);
  },
  _updateCenter() {
    this.cancelDebouncer("updateCenter");
    if (this.map && this.latitude !== void 0 && this.longitude !== void 0) {
      const lati = Number(this.latitude);
      if (isNaN(lati)) {
        throw new TypeError("latitude must be a number");
      }
      const longi = Number(this.longitude);
      if (isNaN(longi)) {
        throw new TypeError("longitude must be a number");
      }
      const newCenter = new google.maps.LatLng(lati, longi);
      let oldCenter = this.map.getCenter();
      if (!oldCenter) {
        this.map.setCenter(newCenter);
      } else {
        oldCenter = new google.maps.LatLng(oldCenter.lat(), oldCenter.lng());
        if (!oldCenter.equals(newCenter)) {
          this.map.panTo(newCenter);
        }
      }
    }
  },
  _zoomChanged() {
    if (this.map) {
      this.map.setZoom(Number(this.zoom));
    }
  },
  _idleEvent() {
    if (this.map) {
      this._forwardEvent("idle");
    } else {
      this._clearListener("idle");
    }
  },
  _clickEventsChanged() {
    if (this.map) {
      if (this.clickEvents) {
        this._forwardEvent("click");
        this._forwardEvent("dblclick");
        this._forwardEvent("rightclick");
      } else {
        this._clearListener("click");
        this._clearListener("dblclick");
        this._clearListener("rightclick");
      }
    }
  },
  _dragEventsChanged() {
    if (this.map) {
      if (this.dragEvents) {
        this._forwardEvent("drag");
        this._forwardEvent("dragend");
        this._forwardEvent("dragstart");
      } else {
        this._clearListener("drag");
        this._clearListener("dragend");
        this._clearListener("dragstart");
      }
    }
  },
  _mouseEventsChanged() {
    if (this.map) {
      if (this.mouseEvents) {
        this._forwardEvent("mousemove");
        this._forwardEvent("mouseout");
        this._forwardEvent("mouseover");
      } else {
        this._clearListener("mousemove");
        this._clearListener("mouseout");
        this._clearListener("mouseover");
      }
    }
  },
  _maxZoomChanged() {
    if (this.map) {
      this.map.setOptions({ maxZoom: Number(this.maxZoom) });
    }
  },
  _minZoomChanged() {
    if (this.map) {
      this.map.setOptions({ minZoom: Number(this.minZoom) });
    }
  },
  _mapTypeChanged() {
    if (this.map) {
      this.map.setMapTypeId(this.mapType);
    }
  },
  _disableDefaultUiChanged() {
    if (!this.map) {
      return;
    }
    this.map.setOptions({ disableDefaultUI: this.disableDefaultUi });
  },
  _disableMapTypeControlChanged() {
    if (!this.map) {
      return;
    }
    this.map.setOptions({ mapTypeControl: !this.disableMapTypeControl });
  },
  _disableStreetViewControlChanged() {
    if (!this.map) {
      return;
    }
    this.map.setOptions({ streetViewControl: !this.disableStreetViewControl });
  },
  _disableRotateControlChanged() {
    if (!this.map) {
      return;
    }
    this.map.setOptions({ rotateControl: !this.disableRotateControl });
  },
  _disableFullScreenControlChanged() {
    if (!this.map) {
      return;
    }
    this.map.setOptions({ fullscreenControl: !this.disableFullScreenControl });
  },
  _disableZoomControlChanged() {
    if (!this.map) {
      return;
    }
    this.map.setOptions({ zoomControl: !this.disableZoomControl });
  },
  _disableScaleControlChanged() {
    if (!this.map) {
      return;
    }
    this.map.setOptions({ scaleControl: !this.disableScaleControl });
  },
  _disableZoomChanged() {
    if (!this.map) {
      return;
    }
    this.map.setOptions({
      disableDoubleClickZoom: this.disableZoom,
      scrollwheel: !this.disableZoom
    });
  },
  _loadMarkersCluster() {
    if (this.map && this.enableMarkersClustering) {
      this.markerCluster = new MarkerClusterer({
        map: this.map,
        markers: this.markers
      });
    }
  },
  attributeChanged(attrName) {
    if (!this.map) {
      return;
    }
    switch (attrName) {
      case "draggable":
        this.map.setOptions({ draggable: this.draggable });
        break;
    }
  },
  _fitToMarkersChanged() {
    if (this.map && this.fitToMarkers && this.markers.length > 0) {
      const latLngBounds = new google.maps.LatLngBounds();
      for (var i = 0, m; m = this.markers[i]; ++i) {
        latLngBounds.extend(new google.maps.LatLng(m.latitude, m.longitude));
      }
      if (this.markers.length > 1) {
        this.map.fitBounds(latLngBounds);
      }
      this.map.setCenter(latLngBounds.getCenter());
    }
  },
  _addMapListeners() {
    google.maps.event.addListener(this.map, "center_changed", () => {
      const center = this.map.getCenter();
      this.latitude = center.lat();
      this.longitude = center.lng();
    });
    google.maps.event.addListener(this.map, "zoom_changed", () => {
      this.zoom = this.map.getZoom();
    });
    google.maps.event.addListener(this.map, "maptypeid_changed", () => {
      this.mapType = this.map.getMapTypeId();
    });
    this._clickEventsChanged();
    this._dragEventsChanged();
    this._mouseEventsChanged();
    this._idleEvent();
  },
  _clearListener(name) {
    if (this._listeners[name]) {
      google.maps.event.removeListener(this._listeners[name]);
      this._listeners[name] = null;
    }
  },
  _forwardEvent(name) {
    this._listeners[name] = google.maps.event.addListener(this.map, name, (event) => {
      this.fire(`google-map-${name}`, event);
    });
  },
  _deselectMarker(e, detail) {
    if (this.$.selector.indexOf) {
      const markerIndex = this.$.selector.indexOf(e.target);
      if (this.singleInfoWindow) {
        this.$.selector.selected = null;
      } else if (this.$.selector.selectedValues) {
        this.$.selector.selectedValues = this.$.selector.selectedValues.filter((i) => i !== markerIndex);
      }
    }
  }
});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/**
@license
Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/
//# sourceMappingURL=@flowingcode_google-map_google-map_js.js.map
